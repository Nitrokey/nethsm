# User-settable parameters.
# Pass these at 'make' invocation time to the top-level Makefile.

# (MODE is set from top-level Makefile and persisted to .stamp-mode.)

# Set NO_GIT=1 if you are using MODE=dev and do not want to build or run
# a Git daemon.
NO_GIT ?=

# Set NET_EXTERNAL=interface to use a non-default interface for the
# "External" (192.168.1.0/24) network.
NET_EXTERNAL ?= tap200

# Set NET_INTERNAL=interface to use a non-default interface for the
# "Internal" (169.254.169.0/24) network.
NET_INTERNAL ?= tap201

# Set KEYFENDER_CARGS=arguments to override arguments passed to mirage configure
# for the Keyfender unikernel. Default for MODE=muen is '--retry=true'.
# (actual setting is performed later)

# Set MUEN_HARDWARE to the specific hardware platform the Muen system is being
# built for. Currently supported: qemu-kvm or supermicro-x11ssh-tf.
#
# TODO: This should be persisted similarly to MODE=, or otherwise detect that
# it changed?
MUEN_HARDWARE ?= qemu-kvm

# Private key directory used to sign Muen system image.
# TODO: Document this more, provide a way to use a GPG-agent/Smart Card, etc.
MUEN_KEY_DIR ?= keys/test-key

# Set USE_CCACHE=1 if you would like to use ccache to speed up the build.
# Note that this automatically sets CCACHE_DIR to a sub-directory of the build
# tree.
USE_CCACHE ?=

# ------------------------------------------------------------------------------

TOP_DIR := $(abspath .)

.SUFFIXES:

# Ensure that variables specified on the (top-level) 'make' command line are
# NOT passed down to sub-makes invoked by this Makefile. Doing so would pass
# down e.g. $(MODE), which is an overloaded name and breaks third-party
# "downstream" Makefiles.
MAKEOVERRIDES =

# Do not run any jobs in *this* Makefile in parallel. This would not gain us
# anything and complicates the output. -j is still passed to and honored by
# recursively called Makefiles.
.NOTPARALLEL:

.PHONY: all
all:
	@echo Error: Makefile.sub should not be invoked directly
	@false

# We cannot use $(MODE) in this Makefile, as that can be overriden by the user
# in the top-level Makefile, and we need either the "last used mode" from
# .stamp-mode OR 'dev' if this is a fresh/distclean'd tree.
XMODE := $(shell cat .stamp-mode 2>/dev/null)

DUNE := dune

ifeq ($(XMODE),)
XMODE := dev
endif
ifeq ($(XMODE),dev)
TARGET := hvt
KEYFENDER_CARGS ?= --no-platform=true
else ifeq ($(XMODE),muen)
TARGET := muen
KEYFENDER_CARGS ?= --retry=true
else ifeq ($(XMODE),test)
TARGET := unix
DUNE := BISECT_ENABLE=yes dune
else
$(error Invalid MODE '$(XMODE)')
endif

ifeq ($(USE_CCACHE),)
CCACHE :=
else
CCACHE := ccache
CCACHE_DIR := $(TOP_DIR)/cache/ccache
export CCACHE_DIR
ifneq ($(shell $(CC) -xc -c - -o /dev/null --ccache-skip </dev/null 2>&1),)
$(error USE_CCACHE was requested but /usr/lib/ccache is not first on $$PATH)
endif
endif

# ------------------------------------------------------------------------------
#
# Rules for 'prepare' step. Common to all MODEs.
#
# ------------------------------------------------------------------------------

.stamp-prepare:
ifeq ($(USE_CCACHE),1)
	mkdir -p $(CCACHE_DIR)
endif
ifeq ($(XMODE),muen)
# Build the Coreboot cross-toolchain. Note that this is only done the 1st time
# a 'make prepare' is done in this tree, and is not removed by a 'make
# (dist)clean'. This is intentional, as this takes a long time and relies on
# several downloads.
	$(MAKE) -C src/coreboot/coreboot crossgcc-i386 CPUS=$(shell nproc)
endif
	opam install -y depext
	opam pin add -y -n keyfender $(TOP_DIR)/src/keyfender#HEAD
	opam depext --yes --update keyfender conf-jq
ifeq ($(XMODE),test)
# Additional dependencies required for coverage testing and building
# generate_raml_tests.exe; we only install these when building with MODE=test.
	opam install -y bisect_ppx containers ezjsonm yaml
	opam install -y --deps-only --with-test keyfender
else
	opam depext --yes --update mirage solo5-bindings-$(TARGET) mirage-solo5
	opam install -y 'mirage>=3.8.1' solo5-bindings-$(TARGET) mirage-solo5
	opam install -y --deps-only keyfender
endif
	touch $@

.PHONY: prepare
prepare: .stamp-prepare

distclean: clean
	-opam pin remove -y $(TOP_DIR)/src/keyfender#HEAD
	$(RM) .stamp-prepare

# ------------------------------------------------------------------------------
#
# Rules for building the keyfender library, and the S-Keyfender unikernel.
# Common to all MODEs.
#
# ------------------------------------------------------------------------------

KEYFENDER := src/keyfender/_build/default/keyfender.cmxa
KEYFENDER_INSTALL := src/keyfender/_build/default/stamp-install
S_KEYFENDER := src/s_keyfender/keyfender.$(TARGET)
GIT_DAEMON ?= src/git/git-daemon

$(KEYFENDER): .stamp-prepare
	cd src/keyfender && $(DUNE) build

# XXX We want to use --assume-built here, but that causes OPAM to go off into an
# XXX infinite loop. So just use --inplace-build, and deal with 'dune build'
# XXX being run twice.
$(KEYFENDER_INSTALL): $(KEYFENDER)
	opam reinstall -y --inplace-build keyfender
	touch $@

.PHONY: clean-keyfender
clean-keyfender:
	-opam remove -y keyfender
	$(RM) $(KEYFENDER_INSTALL)
	-cd src/keyfender && $(DUNE) clean
	-cd src/s_keyfender && mirage clean

$(S_KEYFENDER): $(KEYFENDER_INSTALL)
	cd src/s_keyfender && mirage configure -t $(TARGET) --allocation-policy=best-fit $(KEYFENDER_CARGS)
	cd src/s_keyfender && $(MAKE) depend
	cd src/s_keyfender && mirage build

.PHONY: build-keyfender
build-keyfender: $(S_KEYFENDER)

.PHONY: test-keyfender-lib test-keyfender-e2e
test-keyfender-lib: $(KEYFENDER)
	cd src/keyfender && $(DUNE) runtest
ifeq ($(XMODE),test)
	bisect-ppx-report summary --coverage-path=src/keyfender
endif

test-keyfender-e2e: $(KEYFENDER)
	pkill test_server.exe || true
	cd src/tests && \
	    ../keyfender/_build/default/test/test_server.exe &
	sleep 2
	cd src/tests && \
	    NITROHSM_URL="http://localhost:8080/api" ./provision_test.sh
	cd src/tests && \
	    NITROHSM_URL="http://localhost:8080/api" ITERS=1 JOBS=1 ./load_test.sh
	cd src/tests && \
	    NITROHSM_URL="http://localhost:8080/api" ./shutdown_test.sh
ifeq ($(XMODE),test)
	# Coverage files get saved in the working directory test_server.exe was
	# run in, for this test we only want those in src/tests, not any in
	# src/tests/generated.
	bisect-ppx-report summary src/tests/*.coverage
endif

ifeq ($(XMODE),dev)
# ------------------------------------------------------------------------------
#
# Rules for building and running a local development system using Solo5/hvt.
#
# ------------------------------------------------------------------------------

RUN_DIR := $(TOP_DIR)/run

ifeq ($(NO_GIT),)

GIT_MAKEFLAGS := NO_PERL=1 NO_OPENSSL=1 NO_CURL=1 NO_EXPAT=1 NO_TCLTK=1 \
    NO_GETTEXT=1 NO_PYTHON=1

$(GIT_DAEMON):
	$(MAKE) -C src/git $(GIT_MAKEFLAGS) all

else

$(GIT_DAEMON): ;

endif

.PHONY: build
build: $(S_KEYFENDER) $(GIT_DAEMON)

ifeq ($(NO_GIT),)

$(RUN_DIR)/git/keyfender-data.git:
	mkdir -p $@
	git init --bare $@

$(RUN_DIR)/git-daemon.pid: | $(RUN_DIR)/git/keyfender-data.git
	src/git/bin-wrappers/git daemon \
	    --listen=169.254.169.2 \
	    --base-path=$(RUN_DIR)/git \
	    --export-all \
	    --enable=receive-pack \
	    --pid-file=$@ &

else

$(RUN_DIR)/git-daemon.pid: ;

endif

.PHONY: run
run: build $(RUN_DIR)/git-daemon.pid
	solo5-hvt \
	    --net:external=$(NET_EXTERNAL) \
	    --net:internal=$(NET_INTERNAL) \
	    $(S_KEYFENDER)

.PHONY: clean
clean: clean-keyfender
ifeq ($(NO_GIT),)
	-test -f $(RUN_DIR)/git-daemon.pid && \
	    kill $$(cat $(RUN_DIR)/git-daemon.pid) && \
	    rm $(RUN_DIR)/git-daemon.pid
	$(MAKE) -C src/git --silent --no-print-directory distclean
endif
	$(RM) -r $(RUN_DIR)

else ifeq ($(XMODE),test)
# ------------------------------------------------------------------------------
#
# Rules for building and running Keyfender library, test_server.exe and tests
# only.
#
# Note that the generated API tests (test-keyfender-api) target is only
# available in this mode.
#
# ------------------------------------------------------------------------------

.PHONY: test-keyfender-api
test-keyfender-api: $(KEYFENDER)
	cd src/tests && $(DUNE) exec ./generate_raml_tests.exe
	cd src/tests && ./run_generated_tests.sh
	# For this test we want to consider ALL coverage files under
	# src/tests/generated
	bisect-ppx-report summary --coverage-path=src/tests/generated

.PHONY: build
build: $(KEYFENDER)

.stamp-test-%: test-%
	touch $@

.PHONY: coverage-summary
# Generate a summary coverage report. Runs all test-keyfender-* targets if not
# previously run in this tree.
coverage-summary: .stamp-test-keyfender-api .stamp-test-keyfender-lib .stamp-test-keyfender-e2e
	bisect-ppx-report summary \
	    --coverage-path=src/tests \
	    --coverage-path=src/keyfender

.PHONY: coverage
# Generate a combined coverage report. Runs all test-keyfender-* targets if not
# previously run in this tree.
coverage: .stamp-test-keyfender-api .stamp-test-keyfender-lib .stamp-test-keyfender-e2e
	mkdir -p $(TOP_DIR)/obj
	bisect-ppx-report html \
	    --coverage-path=src/tests \
	    --coverage-path=src/keyfender \
	    --source-path=src/keyfender \
	    -o $(TOP_DIR)/obj/coverage
	@echo "Open obj/coverage/index.html for coverage report"

.PHONY: clean
clean: clean-keyfender
	-cd src/tests && $(DUNE) clean
	find src/tests/generated -mindepth 1 -type d | xargs -r rm -r
	find . -type f -name \*.coverage | xargs -r rm
	$(RM) -r $(TOP_DIR)/obj
	$(RM) .stamp-test-*

else ifeq ($(XMODE),muen)
# ------------------------------------------------------------------------------
#
# Rules for building and running a Muen system.
#
# ------------------------------------------------------------------------------

MUEN_DIR := $(TOP_DIR)/src/muen
MUEN_POLICY_DIR := $(TOP_DIR)/src/muen/policy
MUEN_LINUX_CONFIG := $(MUEN_DIR)/linux/config-5.4-$(MUEN_HARDWARE)

ifeq ($(MUEN_HARDWARE),qemu-kvm)
MUEN_HARDWARE_XML := $(MUEN_POLICY_DIR)/hardware/nitrohsm-$(MUEN_HARDWARE).xml
MUEN_PLATFORM_XML := $(MUEN_POLICY_DIR)/platform/nitrohsm-$(MUEN_HARDWARE).xml
COREBOOT_CONFIG := configs/config.nitrohsm_qemu_q35
else ifeq ($(MUEN_HARDWARE),supermicro-x11ssh-tf)
MUEN_HARDWARE_XML := $(MUEN_POLICY_DIR)/hardware/nitrohsm-$(MUEN_HARDWARE).xml
MUEN_PLATFORM_XML := $(MUEN_POLICY_DIR)/platform/nitrohsm-$(MUEN_HARDWARE).xml
COREBOOT_CONFIG := configs/config.nitrohsm_supermicro_x11_ssh_tf
else
$(error Invalid MUEN_HARDWARE)
endif

OBJ_DIR := $(TOP_DIR)/obj
OBJ_DATA_DIR := $(OBJ_DIR)/data
OBJ_INITRAMFS_DIR := $(OBJ_DIR)/initramfs
OBJ_GIT_BIN_DIR := $(OBJ_INITRAMFS_DIR)/bin
OBJ_GIT_LIBEXEC_DIR := $(OBJ_INITRAMFS_DIR)/libexec/git-core
OBJ_DATA_GIT_DIR := $(OBJ_DATA_DIR)/git

$(OBJ_DIR):
	mkdir -p $@

ZLIB_DIR := $(TOP_DIR)/src/zlib
ZLIB_LIBZ := $(ZLIB_DIR)/libz.a

# The symlinks below are so that we can pass $(ZLIB_DIR) directly to Git's
# build system without a separate "install" step.
$(ZLIB_DIR)/stamp-configure: $(ZLIB_DIR)/configure $(ZLIB_DIR)/Makefile.in
	cd $(ZLIB_DIR) && \
	    CC="$(CCACHE) x86_64-linux-musl-gcc" \
	    ./configure --static
	cd $(ZLIB_DIR) && ln -s . include
	cd $(ZLIB_DIR) && ln -s . lib
	touch $@

$(ZLIB_LIBZ): $(ZLIB_DIR)/stamp-configure
	$(MAKE) -C $(ZLIB_DIR)

GIT_MAKEFLAGS := NO_PERL=1 NO_OPENSSL=1 NO_CURL=1 NO_EXPAT=1 NO_TCLTK=1 \
    NO_GETTEXT=1 NO_PYTHON=1 NO_REGEX=NeedsStartEnd \
    HOST_CPU=x86_64 CC="$(CCACHE) x86_64-linux-musl-gcc" \
    LDFLAGS=-static ZLIB_PATH=$(ZLIB_DIR) \
    INSTALL_SYMLINKS=1 \
    prefix=/ DESTDIR=$(OBJ_INITRAMFS_DIR)

$(GIT_DAEMON): $(ZLIB_LIBZ)
	$(MAKE) -C src/git $(GIT_MAKEFLAGS) all strip

INSTALL_GIT_DAEMON := $(OBJ_GIT_LIBEXEC_DIR)/git-daemon

$(INSTALL_GIT_DAEMON): $(GIT_DAEMON) | $(OBJ_DIR)
	$(MAKE) -C src/git $(GIT_MAKEFLAGS) install
	$(RM) $(OBJ_GIT_LIBEXEC_DIR)/git-credential-*
	$(RM) $(OBJ_GIT_LIBEXEC_DIR)/git-cvs*
	$(RM) $(OBJ_GIT_LIBEXEC_DIR)/git-http-backend
	$(RM) $(OBJ_GIT_LIBEXEC_DIR)/git-imap-send
	$(RM) $(OBJ_GIT_LIBEXEC_DIR)/git-remote-testsvn
	$(RM) $(OBJ_GIT_LIBEXEC_DIR)/git-shell
	$(RM) $(OBJ_GIT_BIN_DIR)/git-cvsserver
	$(RM) $(OBJ_GIT_BIN_DIR)/git-shell

E2FSPROGS_DIR := src/e2fsprogs/build
MKE2FS := $(E2FSPROGS_DIR)/misc/mke2fs
INSTALL_MKE2FS := $(OBJ_INITRAMFS_DIR)/bin/mke2fs

$(E2FSPROGS_DIR)/Makefile: src/e2fsprogs/configure
	mkdir -p $(E2FSPROGS_DIR)
	cd $(E2FSPROGS_DIR) && \
	    ../configure \
	    --host=x86_64-linux-musl \
	    --enable-libuuid \
	    --enable-libblkid \
	    --disable-nls \
	    CC="$(CCACHE) x86_64-linux-musl-gcc" \
	    LDFLAGS=-static

$(MKE2FS): $(E2FSPROGS_DIR)/Makefile
	$(MAKE) -C $(E2FSPROGS_DIR) PROG_SUBDIRS=misc

$(INSTALL_MKE2FS): $(MKE2FS)
	cp $< $@
	strip $@

$(OBJ_DATA_GIT_DIR)/keyfender-data.git:
	mkdir -p $@
	git init --template none --bare $@

$(OBJ_DATA_DIR): $(OBJ_DATA_GIT_DIR)/keyfender-data.git

OBJ_DATA_CPIO := $(OBJ_DIR)/data.cpio

# Given an initialised Git repository in $(OBJ_GIT_DATA_DIR), produce the CPIO
# archive containing the template used to populate an empty /data partition on
# boot. This is a bit round-about; blame UNIX tools for not letting us specify
# ownership information in archives speficially.
#
# Notably, this ensures that everything under /data/git is owned by the Git
# user (1:1), with the "this data partition is now populated" stamp file being
# owned by root (0:0).
$(OBJ_DATA_CPIO): $(OBJ_DATA_DIR)
	cd $(OBJ_DATA_DIR) && \
	    find . -mindepth 1 | cpio -H newc -o -F $@ -R +1:+1 --reproducible
# Workaround for https://github.com/u-root/u-root/issues/1838
	echo dummy > $(OBJ_DATA_DIR)/initialised-v1
	cd $(OBJ_DATA_DIR) && \
	    echo initialised-v1 | cpio -H newc -oA -F $@ -R +0:+0 --reproducible

INSTALL_DATA_CPIO := $(OBJ_INITRAMFS_DIR)/tmpl/data.cpio

# obj/data.cpio is "installed" into the initramfs as tmpl/data.cpio.
$(INSTALL_DATA_CPIO): $(OBJ_DATA_CPIO)
	mkdir -p $(OBJ_INITRAMFS_DIR)/tmpl
	cp $< $@

OBJ_INITRAMFS_CPIO := $(OBJ_DIR)/initramfs.cpio
OBJ_INITRAMFS := $(OBJ_DIR)/initramfs.cpio.gz
U_ROOT_GOPATH := $(TOP_DIR)/src/u-root
U_ROOT_BIN := $(U_ROOT_GOPATH)/bin/u-root
U_ROOT_UINIT := nitrohsm/uinit
# XXX the documented shorthand of cmds/core/{foo,bar} doesn't seem to work here.
U_ROOT_PKGS := github.com/u-root/u-root/cmds/core/init \
    github.com/u-root/u-root/cmds/core/cpio \
    github.com/u-root/u-root/cmds/core/insmod \
    github.com/u-root/u-root/cmds/core/ip \
    github.com/u-root/u-root/cmds/core/ls \
    github.com/u-root/u-root/cmds/core/mkdir \
    github.com/u-root/u-root/cmds/core/mount \
    github.com/u-root/u-root/cmds/core/shutdown \
    github.com/u-root/u-root/cmds/core/umount \
    $(U_ROOT_UINIT)

# Rather than using "export GOPATH" and thus potentially polluting the
# environment of *all* Makefiles called from this Makefile, ensure it is set
# explicitly and only for those recipes/commands that require it.
$(U_ROOT_BIN):
	GOPATH=$(U_ROOT_GOPATH) go install github.com/u-root/u-root

$(OBJ_INITRAMFS): $(U_ROOT_BIN) $(INSTALL_GIT_DAEMON) $(INSTALL_MKE2FS) $(INSTALL_DATA_CPIO)
	GOPATH=$(U_ROOT_GOPATH) $(U_ROOT_BIN) -format=cpio -build=bb \
	    -o $(OBJ_INITRAMFS_CPIO) \
	    -defaultsh="" \
	    -files "$(OBJ_INITRAMFS_DIR):." \
	    $(U_ROOT_PKGS)
	gzip -9 -f $(OBJ_INITRAMFS_CPIO)

# Ensure u-root initramfs is rebuilt if nitrohsm uinit sources change.
# There might be a better way of doing this, but this will have to do for now.
$(OBJ_INITRAMFS): \
    $(U_ROOT_GOPATH)/src/nitrohsm/uinit/uinit.go \
    $(U_ROOT_GOPATH)/src/nitrohsm/uinit/script/script.go

MUEN_POLICY_OBJ_DIR := src/muen/muen/policy/obj
MUEN_PACK_OBJ_DIR := src/muen/muen/pack/obj
MUEN_S_KEYFENDER := $(MUEN_POLICY_OBJ_DIR)/keyfender.muen
MUEN_S_KEYFENDER_CSPEC := src/muen/policy/xml/component_unikernel.xml
MUEN_PACK_IMG_CSL := $(MUEN_PACK_OBJ_DIR)/muen.img.cmds
MUEN_GEN_CSPEC := src/muen/muen/tools/scripts/solo5-muen-gencspec.py
# XXX: Using --bootparams= here is not currently possible without using
# XXX: mirageos/compose.py, so we persist parameters at unikernel configure
# XXX: time instead.
# XXX: We cannot currently allocate more than 3GB of memory to the unikernel
# XXX: due to limitations (chanAddr) of solo5-muen-gencspec.py.
MUEN_GEN_CSPEC_EXTRA := --ram 3072

$(MUEN_S_KEYFENDER) $(MUEN_S_KEYFENDER_CSPEC): $(S_KEYFENDER)
	$(MUEN_GEN_CSPEC) \
	    --out_spec=$(MUEN_S_KEYFENDER_CSPEC) \
	    $(MUEN_GEN_CSPEC_EXTRA) \
	    $< \
	    src/muen/muen/policy/xml/mirageos/cspec_src.xml \
	    $(MUEN_POLICY_OBJ_DIR)

$(MUEN_PACK_IMG_CSL): $(MUEN_S_KEYFENDER) $(MUEN_S_KEYFENDER_CSPEC) $(OBJ_INITRAMFS)
	$(MAKE) -C src/muen/muen --silent --no-print-directory \
	    NO_PROOF=1 \
	    SYSTEM=$(MUEN_POLICY_DIR)/xml/nitrohsm_basic_system.xml \
	    HARDWARE=$(MUEN_HARDWARE_XML) \
	    PLATFORM=$(MUEN_PLATFORM_XML) \
	    LINUX_CONFIG=$(MUEN_LINUX_CONFIG) \
	    INITRAMFS=$(OBJ_INITRAMFS) \
	    pack

OBJ_SYSTEM_IMG := $(OBJ_DIR)/system.img.cpio

$(OBJ_SYSTEM_IMG): $(MUEN_PACK_IMG_CSL) tools/muen-mksysimage.sh
	tools/muen-mksysimage.sh $(MUEN_KEY_DIR) $@ $<

COREBOOT_SRC := src/coreboot/coreboot
COREBOOT_ROM := $(COREBOOT_SRC)/build/coreboot.rom
OBJ_COREBOOT_ROM := $(OBJ_DIR)/coreboot.rom
CBFSTOOL := $(COREBOOT_SRC)/build/cbfstool

$(COREBOOT_SRC)/.config: .stamp-prepare
	cd $(COREBOOT_SRC) && \
	    make defconfig KBUILD_DEFCONFIG=$(COREBOOT_CONFIG)
ifeq ($(USE_CCACHE),1)
	cd $(COREBOOT_SRC) && \
	    util/scripts/config --enable CCACHE
endif

ifneq ($(MUEN_HARDWARE),qemu-kvm)
# When building for the Supermicro hardware, we need to populate the Coreboot
# build tree with the Intel ME blob from this repository.

COREBOOT_BLOB_DIR := \
    $(COREBOOT_SRC)/3rdparty/blobs/mainboard/supermicro/x11-lga1151-series

$(COREBOOT_BLOB_DIR):
	mkdir -p $@

$(COREBOOT_BLOB_DIR)/%.bin: src/coreboot/blobs/%.bin | $(COREBOOT_BLOB_DIR)
	cp $< $@

COREBOOT_BLOBS := \
    $(COREBOOT_BLOB_DIR)/descriptor.bin \
    $(COREBOOT_BLOB_DIR)/me.bin
endif

# Coreboot does it's own magic and checks out submodules depending on the
# actual configuration at build time; unfortunately they do not provide a
# separate Makefile target for this step, so it will be done here.
$(COREBOOT_ROM) $(CBFSTOOL): $(COREBOOT_SRC)/.config $(COREBOOT_BLOBS)
	$(MAKE) -C $(COREBOOT_SRC)

$(OBJ_COREBOOT_ROM): $(COREBOOT_ROM) $(CBFSTOOL)
	cp $< $@
	$(CBFSTOOL) $@ add \
	    -f $(MUEN_KEY_DIR)/key.pub -n etc/trusted.pub -t raw

ifneq ($(MUEN_HARDWARE),qemu-kvm)
# When building for real hardware, stop here.

ARTIFACTS := $(OBJ_SYSTEM_IMG) $(OBJ_COREBOOT_ROM)
.PHONY: build
build: $(ARTIFACTS)

else
# The remaining rules apply to building and running a QEMU/KVM emulated system.

OBJ_QEMU_DISK_IMG := $(OBJ_DIR)/qemu-disk.img

$(OBJ_QEMU_DISK_IMG): $(OBJ_SYSTEM_IMG) tools/nitrohsm-install.sh
	tools/nitrohsm-install.sh -f -E 1G $@ $<

ARTIFACTS := $(OBJ_QEMU_DISK_IMG) $(OBJ_COREBOOT_ROM)
.PHONY: build
build: $(ARTIFACTS)

RUN_DIR := $(TOP_DIR)/run
RUN_QEMU_DISK_IMG := $(RUN_DIR)/disk.img

$(RUN_QEMU_DISK_IMG): $(OBJ_QEMU_DISK_IMG)
	mkdir -p $(RUN_DIR)
	cp $< $@

$(RUN_DIR)/screenrc:
	echo "logfile $(RUN_DIR)/emulate.out" >$@

QEMU ?= qemu-system-x86_64

QEMU_OPTS := \
    -bios $(OBJ_COREBOOT_ROM) \
    -drive file=$(RUN_QEMU_DISK_IMG),format=raw \
    -serial file:run/serial.out \
    -machine q35,accel=kvm,kernel-irqchip=split \
    -cpu host,+invtsc \
    -m 5120 \
    -smp cores=2,threads=2,sockets=1 \
    -device intel-iommu,intremap=on,device-iotlb=on \
    -device ioh3420,id=pcie.1,chassis=1 \
    -device virtio-net-pci,bus=pcie.1,addr=0.0,netdev=net0,disable-legacy=on,disable-modern=off,iommu_platform=on,ats=on \
    -device qemu-xhci,id=xhci,bus=pcie.0,addr=3.0 \
    -device usb-tablet,bus=xhci.0 \
    -netdev tap,id=net0,ifname=$(NET_EXTERNAL),script=no,downscript=no \
    -curses
QEMU_PIDFILE := $(RUN_DIR)/qemu.pid

.PHONY: check-running
check-running:
	@if test -f $(QEMU_PIDFILE) && test -d /proc/`cat $(QEMU_PIDFILE)`; then \
	    echo "Error: QEMU still running, check $(QEMU_PIDFILE)"; \
	    false; \
	else \
	    true; \
	fi

.PHONY: run
run: $(RUN_QEMU_DISK_IMG) $(OBJ_COREBOOT_ROM) $(RUN_DIR)/screenrc check-running
	screen -c $(RUN_DIR)/screenrc -L -dmS kvm-muen \
	    $(QEMU) $(QEMU_OPTS) -pidfile $(RUN_DIR)/qemu.pid
	@echo -n "* QEMU/KVM started for '$(RUN_QEMU_DISK_IMG)', waiting for boot: "
	@for i in $$(seq 1 5); do \
	    sleep 1; \
	    echo -n .; \
	    boot=$$(cat $(RUN_DIR)/serial.out 2>/dev/null | grep 'Booting Muen'); \
	    if [ -n "$$boot" ]; then \
	        echo " OK"; echo; \
	        echo "Console: screen -r kvm-muen"; \
	        echo "         (C-A k to quit, C-A d to detach)"; \
	        break; \
	    fi; \
	done; \
	if [ -z "$$boot" ]; then echo "\nERROR:" && cat $(RUN_DIR)/emulate.out && exit 1; fi

endif # QEMU/KVM

ifneq ($(ARTIFACTS),)
ARTIFACTS_ID := $(shell MODE=$(XMODE) MUEN_HARDWARE=$(MUEN_HARDWARE) \
    tools/get-artifacts-dir.sh)
ARTIFACTS_DIR := $(OBJ_DIR)/artifacts/$(ARTIFACTS_ID)

$(ARTIFACTS_DIR)/SHA256SUM.txt: $(ARTIFACTS)
	mkdir -p $(ARTIFACTS_DIR)
	cp $(ARTIFACTS) $(ARTIFACTS_DIR)
	cd $(ARTIFACTS_DIR) && sha256sum $(notdir $(ARTIFACTS)) >$@

.PHONY: artifacts
artifacts: $(ARTIFACTS_DIR)/SHA256SUM.txt
	@echo ""
	@echo "Built artifacts in $(OBJ_DIR)/artifacts for:"
	@echo "$(ARTIFACTS_ID)"
	@echo ""
	@cat $<
endif

.PHONY: clean
clean: clean-keyfender
	$(RM) $(MUEN_S_KEYFENDER) $(MUEN_S_KEYFENDER_CSPEC)
	$(MAKE) -C src/muen/muen --silent --no-print-directory distclean
# Remove the Linux kernel configuration to ensure a reconfigure/rebuild if it changes
	$(RM) src/muen/muen/components/linux/src/.config*
	$(MAKE) -C src/coreboot/coreboot --silent --no-print-directory distclean
# The above does not clean up the checked-out GRUB 2 properly, so do it here
	$(RM) -r src/coreboot/coreboot/payloads/external/GRUB2/grub2
	$(MAKE) -C src/git --silent --no-print-directory distclean
	$(MAKE) -C src/zlib --silent --no-print-directory distclean
	$(RM) $(ZLIB_DIR)/stamp-configure $(ZLIB_DIR)/include $(ZLIB_DIR)/lib
	$(RM) -r $(E2FSPROGS_DIR)
	$(RM) $(U_ROOT_BIN)
	$(RM) -r $(OBJ_DIR) $(RUN_DIR)

endif
