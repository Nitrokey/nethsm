diff --git a/policy/xml/mirageos/cspec_src.xml b/policy/xml/mirageos/cspec_src.xml
index e9ec46b52..3e1f1322b 100644
--- a/policy/xml/mirageos/cspec_src.xml
+++ b/policy/xml/mirageos/cspec_src.xml
@@ -28,9 +28,6 @@
      </exception>
     </masks>
    </vmx>
-   <msrs>
-    <msr end="16#c000_0100#" mode="rw" start="16#c000_0100#"/>
-   </msrs>
    <registers>
     <gpr>
      <rip>16#0010_0000#</rip>
diff --git a/tools/scripts/solo5-muen-gencspec.py b/tools/scripts/solo5-muen-gencspec.py
index 0d7d326d0..4218ab67a 100755
--- a/tools/scripts/solo5-muen-gencspec.py
+++ b/tools/scripts/solo5-muen-gencspec.py
@@ -17,10 +17,9 @@ MFT_CMD = "solo5-elftool query-manifest"
 ABI_CMD = "solo5-elftool query-abi"
 DEFAULT_RAM_SIZE = "512"
 MAX_NAME_LEN = 63
-NOP = 0x90
 
 ABI_TARGET = "muen"
-ABI_VERSION = 3
+ABI_VERSION = 2
 
 chan_size = 0x100000
 chan_addr = 0xE0000000
@@ -109,11 +108,7 @@ def add_elf_memory(xml_spec, binary, filename):
 
             n = "+".join([section.name for section in sections])
             mem_name = (n[: max_len - 2] + "..") if len(n) > max_len else n
-
-            # Rename .text to text so Muinit can look it up and use it as entry
-            # point after initialization.
-            if ".text" in mem_name:
-                mem_name = "text"
+            print("* Adding memory region '" + mem_name + "'")
 
             w = ELF.SEGMENT_FLAGS.W in segment
             x = ELF.SEGMENT_FLAGS.X in segment
@@ -125,19 +120,17 @@ def add_elf_memory(xml_spec, binary, filename):
             vaddr_str = muutils.int_to_ada_hex(virtual_addr)
             offset_str = muutils.int_to_ada_hex(segment.file_offset)
 
-            if phy_size > 0:
-                print("* Adding memory region '" + mem_name + "'")
-                mem = etree.Element(
-                    "memory",
-                    logical=mem_name,
-                    virtualAddress=vaddr_str,
-                    size=muutils.int_to_ada_hex(phy_size),
-                    executable=muutils.bool_to_str(x),
-                    writable=muutils.bool_to_str(w),
-                    type="subject_binary",
-                )
-                etree.SubElement(mem, "file", filename=filename, offset=offset_str)
-                provides.append(mem)
+            mem = etree.Element(
+                "memory",
+                logical=mem_name,
+                virtualAddress=vaddr_str,
+                size=muutils.int_to_ada_hex(phy_size),
+                executable=muutils.bool_to_str(x),
+                writable=muutils.bool_to_str(w),
+                type="subject_binary",
+            )
+            etree.SubElement(mem, "file", filename=filename, offset=offset_str)
+            provides.append(mem)
 
             # Add fill region if virtual_size is larger than physical_size
             mem_size = segment.virtual_size
@@ -247,34 +240,6 @@ def validate_solo5_abi(raw_abi):
             + str(ABI_VERSION)
         )
 
-
-def patch_binary(binary):
-    """
-    Patch .interp section at beginning of binary preceding .text with NOPs
-    which effectively makes the start of the text section an entry point.
-    This is required to be loadable by the Muinit stub, since it transfers
-    control to the start of the text section.
-    """
-    interp_section = binary.get_section(".interp")
-    text_section = binary.get_section(".text")
-    if text_section is None:
-        sys.exit("Error: Unable to patch binary - '.text' section not found")
-
-    patch_size = text_section.file_offset - interp_section.file_offset
-
-    print(
-        "Patching binary @ file offset "
-        + muutils.int_to_ada_hex(interp_section.file_offset)
-        + " with "
-        + str(patch_size)
-        + " NOPs"
-    )
-    fh = open(out_bin_path, "r+b")
-    fh.seek(interp_section.file_offset)
-    fh.write(bytes([NOP] * patch_size))
-    fh.close()
-
-
 def parse_args():
     """
     Returned parsed command line arguments
@@ -415,4 +380,3 @@ if copy_binary:
     out_bin_path = out_dir + "/" + binary_name
     print("Copying unikernel binary to '" + out_bin_path + "'")
     shutil.copy(src_bin_path, out_bin_path)
-    patch_binary(binary)
