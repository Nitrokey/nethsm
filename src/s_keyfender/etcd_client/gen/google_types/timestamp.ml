(********************************************************)
(*           AUTOGENERATED FILE - DO NOT EDIT!          *)
(********************************************************)
(* Generated by: ocaml-protoc-plugin                    *)
(* https://github.com/andersfugmann/ocaml-protoc-plugin *)
(********************************************************)
(*
  Source: google/protobuf/timestamp.proto
  Syntax: proto3
  Parameters:
    debug=false
    annot=''
    opens=[]
    int64_as_int=true
    int32_as_int=true
    fixed_as_int=false
    singleton_record=false
    prefix_output_with_package=false
*)
[@@@ocaml.alert "-protobuf"] (* Disable deprecation warnings for protobuf*)

(**/**)
module Runtime' = Ocaml_protoc_plugin [@@warning "-33"]
module Imported'modules = struct
end
(**/**)
module rec Google : sig
  module rec Protobuf : sig

    (**
      A Timestamp represents a point in time independent of any time zone or local
      calendar, encoded as a count of seconds and fractions of seconds at
      nanosecond resolution. The count is relative to an epoch at UTC midnight on
      January 1, 1970, in the proleptic Gregorian calendar which extends the
      Gregorian calendar backwards to year one.

      All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
      second table is needed for interpretation, using a \[24-hour linear
      smear\](https://developers.google.com/time/smear).

      The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
      restricting to that range, we ensure that we can convert to and from \[RFC
      3339\](https://www.ietf.org/rfc/rfc3339.txt) date strings.

      # Examples

      Example 1: Compute Timestamp from POSIX `time()`.
      {v
           Timestamp timestamp;
           timestamp.set_seconds(time(NULL));
           timestamp.set_nanos(0);
      v}
      Example 2: Compute Timestamp from POSIX `gettimeofday()`.
      {v
           struct timeval tv;
           gettimeofday(&tv, NULL);

           Timestamp timestamp;
           timestamp.set_seconds(tv.tv_sec);
           timestamp.set_nanos(tv.tv_usec * 1000);
      v}
      Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.
      {v
           FILETIME ft;
           GetSystemTimeAsFileTime(&ft);
           UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

           // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
           // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
           Timestamp timestamp;
           timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
           timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));
      v}
      Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.
      {v
           long millis = System.currentTimeMillis();

           Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
               .setNanos((int) ((millis % 1000) * 1000000)).build();
      v}
      Example 5: Compute Timestamp from Java `Instant.now()`.
      {v
           Instant now = Instant.now();

           Timestamp timestamp =
               Timestamp.newBuilder().setSeconds(now.getEpochSecond())
                   .setNanos(now.getNano()).build();
      v}
      Example 6: Compute Timestamp from current time in Python.
      {v
           timestamp = Timestamp()
           timestamp.GetCurrentTime()
      v}
      # JSON Mapping

      In JSON format, the Timestamp type is encoded as a string in the
      \[RFC 3339\](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
      format is "\{year\}-\{month\}-\{day\}T\{hour\}:\{min\}:\{sec\}\[.\{frac_sec\}\]Z"
      where \{year\} is always expressed using four digits while \{month\}, \{day\},
      \{hour\}, \{min\}, and \{sec\} are zero-padded to two digits each. The fractional
      seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
      are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
      is required. A proto3 JSON serializer should always use UTC (as indicated by
      "Z") when printing the Timestamp type and a proto3 JSON parser should be
      able to accept both UTC and other timezones (as indicated by an offset).

      For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
      01:30 UTC on January 15, 2017.

      In JavaScript, one can convert a Date object to this format using the
      standard
      \[toISOString()\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
      method. In Python, a standard `datetime.datetime` object can be converted
      to this format using
      \[`strftime`\](https://docs.python.org/2/library/time.html#time.strftime) with
      the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
      the Joda Time's \[`ISODateTimeFormat.dateTime()`\](
      http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
      ) to obtain a formatter capable of generating timestamps in this format.
    *)
    module rec Timestamp : sig
      type t = {
      seconds: int;(** Represents seconds of UTC time since Unix epoch
      1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
      9999-12-31T23:59:59Z inclusive. *)
      nanos: int;(** Non-negative fractions of a second at nanosecond resolution. Negative
      second values with fractions must still have non-negative nanos values
      that count forward in time. Must be from 0 to 999,999,999
      inclusive. *)
      }
      val make: ?seconds:int -> ?nanos:int -> unit -> t
      (** Helper function to generate a message using default values *)

      val to_proto: t -> Runtime'.Writer.t
      (** Serialize the message to binary format *)

      val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
      (** Deserialize from binary format *)

      val to_json: Runtime'.Json_options.t -> t -> Runtime'.Json.t
      (** Serialize to Json (compatible with Yojson.Basic.t) *)

      val from_json: Runtime'.Json.t -> (t, [> Runtime'.Result.error]) result
      (** Deserialize from Json (compatible with Yojson.Basic.t) *)

      val name: unit -> string
      (** Fully qualified protobuf name of this message *)

      (**/**)
      type make_t = ?seconds:int -> ?nanos:int -> unit -> t
      val merge: t -> t -> t
      val to_proto': Runtime'.Writer.t -> t -> unit
      val from_proto_exn: Runtime'.Reader.t -> t
      val from_json_exn: Runtime'.Json.t -> t
      (**/**)
    end
  end
end = struct
  module rec Protobuf : sig

    (**
      A Timestamp represents a point in time independent of any time zone or local
      calendar, encoded as a count of seconds and fractions of seconds at
      nanosecond resolution. The count is relative to an epoch at UTC midnight on
      January 1, 1970, in the proleptic Gregorian calendar which extends the
      Gregorian calendar backwards to year one.

      All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
      second table is needed for interpretation, using a \[24-hour linear
      smear\](https://developers.google.com/time/smear).

      The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
      restricting to that range, we ensure that we can convert to and from \[RFC
      3339\](https://www.ietf.org/rfc/rfc3339.txt) date strings.

      # Examples

      Example 1: Compute Timestamp from POSIX `time()`.
      {v
           Timestamp timestamp;
           timestamp.set_seconds(time(NULL));
           timestamp.set_nanos(0);
      v}
      Example 2: Compute Timestamp from POSIX `gettimeofday()`.
      {v
           struct timeval tv;
           gettimeofday(&tv, NULL);

           Timestamp timestamp;
           timestamp.set_seconds(tv.tv_sec);
           timestamp.set_nanos(tv.tv_usec * 1000);
      v}
      Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.
      {v
           FILETIME ft;
           GetSystemTimeAsFileTime(&ft);
           UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

           // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
           // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
           Timestamp timestamp;
           timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
           timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));
      v}
      Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.
      {v
           long millis = System.currentTimeMillis();

           Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
               .setNanos((int) ((millis % 1000) * 1000000)).build();
      v}
      Example 5: Compute Timestamp from Java `Instant.now()`.
      {v
           Instant now = Instant.now();

           Timestamp timestamp =
               Timestamp.newBuilder().setSeconds(now.getEpochSecond())
                   .setNanos(now.getNano()).build();
      v}
      Example 6: Compute Timestamp from current time in Python.
      {v
           timestamp = Timestamp()
           timestamp.GetCurrentTime()
      v}
      # JSON Mapping

      In JSON format, the Timestamp type is encoded as a string in the
      \[RFC 3339\](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
      format is "\{year\}-\{month\}-\{day\}T\{hour\}:\{min\}:\{sec\}\[.\{frac_sec\}\]Z"
      where \{year\} is always expressed using four digits while \{month\}, \{day\},
      \{hour\}, \{min\}, and \{sec\} are zero-padded to two digits each. The fractional
      seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
      are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
      is required. A proto3 JSON serializer should always use UTC (as indicated by
      "Z") when printing the Timestamp type and a proto3 JSON parser should be
      able to accept both UTC and other timezones (as indicated by an offset).

      For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
      01:30 UTC on January 15, 2017.

      In JavaScript, one can convert a Date object to this format using the
      standard
      \[toISOString()\](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
      method. In Python, a standard `datetime.datetime` object can be converted
      to this format using
      \[`strftime`\](https://docs.python.org/2/library/time.html#time.strftime) with
      the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
      the Joda Time's \[`ISODateTimeFormat.dateTime()`\](
      http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
      ) to obtain a formatter capable of generating timestamps in this format.
    *)
    module rec Timestamp : sig
      type t = {
      seconds: int;(** Represents seconds of UTC time since Unix epoch
      1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
      9999-12-31T23:59:59Z inclusive. *)
      nanos: int;(** Non-negative fractions of a second at nanosecond resolution. Negative
      second values with fractions must still have non-negative nanos values
      that count forward in time. Must be from 0 to 999,999,999
      inclusive. *)
      }
      val make: ?seconds:int -> ?nanos:int -> unit -> t
      (** Helper function to generate a message using default values *)

      val to_proto: t -> Runtime'.Writer.t
      (** Serialize the message to binary format *)

      val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
      (** Deserialize from binary format *)

      val to_json: Runtime'.Json_options.t -> t -> Runtime'.Json.t
      (** Serialize to Json (compatible with Yojson.Basic.t) *)

      val from_json: Runtime'.Json.t -> (t, [> Runtime'.Result.error]) result
      (** Deserialize from Json (compatible with Yojson.Basic.t) *)

      val name: unit -> string
      (** Fully qualified protobuf name of this message *)

      (**/**)
      type make_t = ?seconds:int -> ?nanos:int -> unit -> t
      val merge: t -> t -> t
      val to_proto': Runtime'.Writer.t -> t -> unit
      val from_proto_exn: Runtime'.Reader.t -> t
      val from_json_exn: Runtime'.Json.t -> t
      (**/**)
    end
  end = struct
    module rec Timestamp : sig
      type t = {
      seconds: int;(** Represents seconds of UTC time since Unix epoch
      1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
      9999-12-31T23:59:59Z inclusive. *)
      nanos: int;(** Non-negative fractions of a second at nanosecond resolution. Negative
      second values with fractions must still have non-negative nanos values
      that count forward in time. Must be from 0 to 999,999,999
      inclusive. *)
      }
      val make: ?seconds:int -> ?nanos:int -> unit -> t
      (** Helper function to generate a message using default values *)

      val to_proto: t -> Runtime'.Writer.t
      (** Serialize the message to binary format *)

      val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
      (** Deserialize from binary format *)

      val to_json: Runtime'.Json_options.t -> t -> Runtime'.Json.t
      (** Serialize to Json (compatible with Yojson.Basic.t) *)

      val from_json: Runtime'.Json.t -> (t, [> Runtime'.Result.error]) result
      (** Deserialize from Json (compatible with Yojson.Basic.t) *)

      val name: unit -> string
      (** Fully qualified protobuf name of this message *)

      (**/**)
      type make_t = ?seconds:int -> ?nanos:int -> unit -> t
      val merge: t -> t -> t
      val to_proto': Runtime'.Writer.t -> t -> unit
      val from_proto_exn: Runtime'.Reader.t -> t
      val from_json_exn: Runtime'.Json.t -> t
      (**/**)
    end = struct
      module This'_ = Timestamp
      let name () = ".google.protobuf.Timestamp"
      type t = {
      seconds: int;(** Represents seconds of UTC time since Unix epoch
      1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
      9999-12-31T23:59:59Z inclusive. *)
      nanos: int;(** Non-negative fractions of a second at nanosecond resolution. Negative
      second values with fractions must still have non-negative nanos values
      that count forward in time. Must be from 0 to 999,999,999
      inclusive. *)
      }
      type make_t = ?seconds:int -> ?nanos:int -> unit -> t
      let make ?(seconds = 0) ?(nanos = 0) () = { seconds; nanos }
      let merge =
      let merge_seconds = Runtime'.Merge.merge Runtime'.Spec.( basic ((1, "seconds", "seconds"), int64_int, (0)) ) in
      let merge_nanos = Runtime'.Merge.merge Runtime'.Spec.( basic ((2, "nanos", "nanos"), int32_int, (0)) ) in
      fun t1 t2 -> {
      seconds = (merge_seconds t1.seconds t2.seconds);
      nanos = (merge_nanos t1.nanos t2.nanos);
       }
      let spec () = Runtime'.Spec.( basic ((1, "seconds", "seconds"), int64_int, (0)) ^:: basic ((2, "nanos", "nanos"), int32_int, (0)) ^:: nil )
      let to_proto' =
        let serialize = Runtime'.apply_lazy (fun () -> Runtime'.Serialize.serialize (spec ())) in
        fun writer { seconds; nanos } -> serialize writer seconds nanos

      let to_proto t = let writer = Runtime'.Writer.init () in to_proto' writer t; writer
      let from_proto_exn =
        let constructor seconds nanos = { seconds; nanos } in
        Runtime'.apply_lazy (fun () -> Runtime'.Deserialize.deserialize (spec ()) constructor)
      let from_proto writer = Runtime'.Result.catch (fun () -> from_proto_exn writer)
      let to_json options =
        let serialize = Runtime'.Serialize_json.serialize ~message_name:(name ()) (spec ()) options in
        fun { seconds; nanos } -> serialize seconds nanos
      let from_json_exn =
        let constructor seconds nanos = { seconds; nanos } in
        Runtime'.apply_lazy (fun () -> Runtime'.Deserialize_json.deserialize ~message_name:(name ()) (spec ()) constructor)
      let from_json json = Runtime'.Result.catch (fun () -> from_json_exn json)
    end
  end
end
