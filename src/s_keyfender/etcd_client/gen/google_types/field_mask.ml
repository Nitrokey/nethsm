(********************************************************)
(*           AUTOGENERATED FILE - DO NOT EDIT!          *)
(********************************************************)
(* Generated by: ocaml-protoc-plugin                    *)
(* https://github.com/andersfugmann/ocaml-protoc-plugin *)
(********************************************************)
(*
  Source: google/protobuf/field_mask.proto
  Syntax: proto3
  Parameters:
    debug=false
    annot=''
    opens=[]
    int64_as_int=true
    int32_as_int=true
    fixed_as_int=false
    singleton_record=false
    prefix_output_with_package=false
*)
[@@@ocaml.alert "-protobuf"] (* Disable deprecation warnings for protobuf*)

(**/**)
module Runtime' = Ocaml_protoc_plugin [@@warning "-33"]
module Imported'modules = struct
end
(**/**)
module rec Google : sig
  module rec Protobuf : sig

    (**
      `FieldMask` represents a set of symbolic field paths, for example:
      {v
           paths: "f.a"
           paths: "f.b.d"
      v}
      Here `f` represents a field in some root message, `a` and `b`
      fields in the message found in `f`, and `d` a field found in the
      message in `f.b`.

      Field masks are used to specify a subset of fields that should be
      returned by a get operation or modified by an update operation.
      Field masks also have a custom JSON encoding (see below).

      # Field Masks in Projections

      When used in the context of a projection, a response message or
      sub-message is filtered by the API to only contain those fields as
      specified in the mask. For example, if the mask in the previous
      example is applied to a response message as follows:
      {v
           f {
             a : 22
             b {
               d : 1
               x : 2
             }
             y : 13
           }
           z: 8
      v}
      The result will not contain specific values for fields x,y and z
      (their value will be set to the default, and omitted in proto text
      output):
      {v
           f {
             a : 22
             b {
               d : 1
             }
           }
      v}
      A repeated field is not allowed except at the last position of a
      paths string.

      If a FieldMask object is not present in a get operation, the
      operation applies to all fields (as if a FieldMask of all fields
      had been specified).

      Note that a field mask does not necessarily apply to the
      top-level response message. In case of a REST get operation, the
      field mask applies directly to the response, but in case of a REST
      list operation, the mask instead applies to each individual message
      in the returned resource list. In case of a REST custom method,
      other definitions may be used. Where the mask applies will be
      clearly documented together with its declaration in the API.  In
      any case, the effect on the returned resource/resources is required
      behavior for APIs.

      # Field Masks in Update Operations

      A field mask in update operations specifies which fields of the
      targeted resource are going to be updated. The API is required
      to only change the values of the fields as specified in the mask
      and leave the others untouched. If a resource is passed in to
      describe the updated values, the API ignores the values of all
      fields not covered by the mask.

      If a repeated field is specified for an update operation, new values will
      be appended to the existing repeated field in the target resource. Note that
      a repeated field is only allowed in the last position of a `paths` string.

      If a sub-message is specified in the last position of the field mask for an
      update operation, then new value will be merged into the existing sub-message
      in the target resource.

      For example, given the target message:
      {v
           f {
             b {
               d: 1
               x: 2
             }
             c: [1]
           }
      v}
      And an update message:
      {v
           f {
             b {
               d: 10
             }
             c: [2]
           }
      v}
      then if the field mask is:
      {v
        paths: ["f.b", "f.c"]
      v}
      then the result will be:
      {v
           f {
             b {
               d: 10
               x: 2
             }
             c: [1, 2]
           }
      v}
      An implementation may provide options to override this default behavior for
      repeated and message fields.

      In order to reset a field's value to the default, the field must
      be in the mask and set to the default value in the provided resource.
      Hence, in order to reset all fields of a resource, provide a default
      instance of the resource and set all fields in the mask, or do
      not provide a mask as described below.

      If a field mask is not present on update, the operation applies to
      all fields (as if a field mask of all fields has been specified).
      Note that in the presence of schema evolution, this may mean that
      fields the client does not know and has therefore not filled into
      the request will be reset to their default. If this is unwanted
      behavior, a specific service may require a client to always specify
      a field mask, producing an error if not.

      As with get operations, the location of the resource which
      describes the updated values in the request message depends on the
      operation kind. In any case, the effect of the field mask is
      required to be honored by the API.

      ## Considerations for HTTP REST

      The HTTP kind of an update operation which uses a field mask must
      be set to PATCH instead of PUT in order to satisfy HTTP semantics
      (PUT must only be used for full updates).

      # JSON Encoding of Field Masks

      In JSON, a field mask is encoded as a single string where paths are
      separated by a comma. Fields name in each path are converted
      to/from lower-camel naming conventions.

      As an example, consider the following message declarations:
      {v
           message Profile {
             User user = 1;
             Photo photo = 2;
           }
           message User {
             string display_name = 1;
             string address = 2;
           }
      v}
      In proto a field mask for `Profile` may look as such:
      {v
           mask {
             paths: "user.display_name"
             paths: "photo"
           }
      v}
      In JSON, the same mask is represented as below:
      {v
           {
             mask: "user.displayName,photo"
           }
      v}
      # Field Masks and Oneof Fields

      Field masks treat fields in oneofs just as regular fields. Consider the
      following message:
      {v
           message SampleMessage {
             oneof test_oneof {
               string name = 4;
               SubMessage sub_message = 9;
             }
           }
      v}
      The field mask can be:
      {v
           mask {
             paths: "name"
           }
      v}
      Or:
      {v
           mask {
             paths: "sub_message"
           }
      v}
      Note that oneof type names ("test_oneof" in this case) cannot be used in
      paths.

      ## Field Mask Verification

      The implementation of any API method which has a FieldMask type field in the
      request should verify the included field paths, and return an
      `INVALID_ARGUMENT` error if any path is unmappable.
    *)
    module rec FieldMask : sig
      type t = (string list)
      (**
      The set of field mask paths.
      *)

      val make: ?paths:string list -> unit -> t
      (** Helper function to generate a message using default values *)

      val to_proto: t -> Runtime'.Writer.t
      (** Serialize the message to binary format *)

      val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
      (** Deserialize from binary format *)

      val to_json: Runtime'.Json_options.t -> t -> Runtime'.Json.t
      (** Serialize to Json (compatible with Yojson.Basic.t) *)

      val from_json: Runtime'.Json.t -> (t, [> Runtime'.Result.error]) result
      (** Deserialize from Json (compatible with Yojson.Basic.t) *)

      val name: unit -> string
      (** Fully qualified protobuf name of this message *)

      (**/**)
      type make_t = ?paths:string list -> unit -> t
      val merge: t -> t -> t
      val to_proto': Runtime'.Writer.t -> t -> unit
      val from_proto_exn: Runtime'.Reader.t -> t
      val from_json_exn: Runtime'.Json.t -> t
      (**/**)
    end
  end
end = struct
  module rec Protobuf : sig

    (**
      `FieldMask` represents a set of symbolic field paths, for example:
      {v
           paths: "f.a"
           paths: "f.b.d"
      v}
      Here `f` represents a field in some root message, `a` and `b`
      fields in the message found in `f`, and `d` a field found in the
      message in `f.b`.

      Field masks are used to specify a subset of fields that should be
      returned by a get operation or modified by an update operation.
      Field masks also have a custom JSON encoding (see below).

      # Field Masks in Projections

      When used in the context of a projection, a response message or
      sub-message is filtered by the API to only contain those fields as
      specified in the mask. For example, if the mask in the previous
      example is applied to a response message as follows:
      {v
           f {
             a : 22
             b {
               d : 1
               x : 2
             }
             y : 13
           }
           z: 8
      v}
      The result will not contain specific values for fields x,y and z
      (their value will be set to the default, and omitted in proto text
      output):
      {v
           f {
             a : 22
             b {
               d : 1
             }
           }
      v}
      A repeated field is not allowed except at the last position of a
      paths string.

      If a FieldMask object is not present in a get operation, the
      operation applies to all fields (as if a FieldMask of all fields
      had been specified).

      Note that a field mask does not necessarily apply to the
      top-level response message. In case of a REST get operation, the
      field mask applies directly to the response, but in case of a REST
      list operation, the mask instead applies to each individual message
      in the returned resource list. In case of a REST custom method,
      other definitions may be used. Where the mask applies will be
      clearly documented together with its declaration in the API.  In
      any case, the effect on the returned resource/resources is required
      behavior for APIs.

      # Field Masks in Update Operations

      A field mask in update operations specifies which fields of the
      targeted resource are going to be updated. The API is required
      to only change the values of the fields as specified in the mask
      and leave the others untouched. If a resource is passed in to
      describe the updated values, the API ignores the values of all
      fields not covered by the mask.

      If a repeated field is specified for an update operation, new values will
      be appended to the existing repeated field in the target resource. Note that
      a repeated field is only allowed in the last position of a `paths` string.

      If a sub-message is specified in the last position of the field mask for an
      update operation, then new value will be merged into the existing sub-message
      in the target resource.

      For example, given the target message:
      {v
           f {
             b {
               d: 1
               x: 2
             }
             c: [1]
           }
      v}
      And an update message:
      {v
           f {
             b {
               d: 10
             }
             c: [2]
           }
      v}
      then if the field mask is:
      {v
        paths: ["f.b", "f.c"]
      v}
      then the result will be:
      {v
           f {
             b {
               d: 10
               x: 2
             }
             c: [1, 2]
           }
      v}
      An implementation may provide options to override this default behavior for
      repeated and message fields.

      In order to reset a field's value to the default, the field must
      be in the mask and set to the default value in the provided resource.
      Hence, in order to reset all fields of a resource, provide a default
      instance of the resource and set all fields in the mask, or do
      not provide a mask as described below.

      If a field mask is not present on update, the operation applies to
      all fields (as if a field mask of all fields has been specified).
      Note that in the presence of schema evolution, this may mean that
      fields the client does not know and has therefore not filled into
      the request will be reset to their default. If this is unwanted
      behavior, a specific service may require a client to always specify
      a field mask, producing an error if not.

      As with get operations, the location of the resource which
      describes the updated values in the request message depends on the
      operation kind. In any case, the effect of the field mask is
      required to be honored by the API.

      ## Considerations for HTTP REST

      The HTTP kind of an update operation which uses a field mask must
      be set to PATCH instead of PUT in order to satisfy HTTP semantics
      (PUT must only be used for full updates).

      # JSON Encoding of Field Masks

      In JSON, a field mask is encoded as a single string where paths are
      separated by a comma. Fields name in each path are converted
      to/from lower-camel naming conventions.

      As an example, consider the following message declarations:
      {v
           message Profile {
             User user = 1;
             Photo photo = 2;
           }
           message User {
             string display_name = 1;
             string address = 2;
           }
      v}
      In proto a field mask for `Profile` may look as such:
      {v
           mask {
             paths: "user.display_name"
             paths: "photo"
           }
      v}
      In JSON, the same mask is represented as below:
      {v
           {
             mask: "user.displayName,photo"
           }
      v}
      # Field Masks and Oneof Fields

      Field masks treat fields in oneofs just as regular fields. Consider the
      following message:
      {v
           message SampleMessage {
             oneof test_oneof {
               string name = 4;
               SubMessage sub_message = 9;
             }
           }
      v}
      The field mask can be:
      {v
           mask {
             paths: "name"
           }
      v}
      Or:
      {v
           mask {
             paths: "sub_message"
           }
      v}
      Note that oneof type names ("test_oneof" in this case) cannot be used in
      paths.

      ## Field Mask Verification

      The implementation of any API method which has a FieldMask type field in the
      request should verify the included field paths, and return an
      `INVALID_ARGUMENT` error if any path is unmappable.
    *)
    module rec FieldMask : sig
      type t = (string list)
      (**
      The set of field mask paths.
      *)

      val make: ?paths:string list -> unit -> t
      (** Helper function to generate a message using default values *)

      val to_proto: t -> Runtime'.Writer.t
      (** Serialize the message to binary format *)

      val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
      (** Deserialize from binary format *)

      val to_json: Runtime'.Json_options.t -> t -> Runtime'.Json.t
      (** Serialize to Json (compatible with Yojson.Basic.t) *)

      val from_json: Runtime'.Json.t -> (t, [> Runtime'.Result.error]) result
      (** Deserialize from Json (compatible with Yojson.Basic.t) *)

      val name: unit -> string
      (** Fully qualified protobuf name of this message *)

      (**/**)
      type make_t = ?paths:string list -> unit -> t
      val merge: t -> t -> t
      val to_proto': Runtime'.Writer.t -> t -> unit
      val from_proto_exn: Runtime'.Reader.t -> t
      val from_json_exn: Runtime'.Json.t -> t
      (**/**)
    end
  end = struct
    module rec FieldMask : sig
      type t = (string list)
      (**
      The set of field mask paths.
      *)

      val make: ?paths:string list -> unit -> t
      (** Helper function to generate a message using default values *)

      val to_proto: t -> Runtime'.Writer.t
      (** Serialize the message to binary format *)

      val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
      (** Deserialize from binary format *)

      val to_json: Runtime'.Json_options.t -> t -> Runtime'.Json.t
      (** Serialize to Json (compatible with Yojson.Basic.t) *)

      val from_json: Runtime'.Json.t -> (t, [> Runtime'.Result.error]) result
      (** Deserialize from Json (compatible with Yojson.Basic.t) *)

      val name: unit -> string
      (** Fully qualified protobuf name of this message *)

      (**/**)
      type make_t = ?paths:string list -> unit -> t
      val merge: t -> t -> t
      val to_proto': Runtime'.Writer.t -> t -> unit
      val from_proto_exn: Runtime'.Reader.t -> t
      val from_json_exn: Runtime'.Json.t -> t
      (**/**)
    end = struct
      module This'_ = FieldMask
      let name () = ".google.protobuf.FieldMask"
      type t = (string list)
      (**
      The set of field mask paths.
      *)

      type make_t = ?paths:string list -> unit -> t
      let make ?(paths = []) () = (paths)
      let merge =
      let merge_paths = Runtime'.Merge.merge Runtime'.Spec.( repeated ((1, "paths", "paths"), string, not_packed) ) in
      fun (t1_paths) (t2_paths) -> merge_paths t1_paths t2_paths
      let spec () = Runtime'.Spec.( repeated ((1, "paths", "paths"), string, not_packed) ^:: nil )
      let to_proto' =
        let serialize = Runtime'.apply_lazy (fun () -> Runtime'.Serialize.serialize (spec ())) in
        fun writer (paths) -> serialize writer paths

      let to_proto t = let writer = Runtime'.Writer.init () in to_proto' writer t; writer
      let from_proto_exn =
        let constructor paths = (paths) in
        Runtime'.apply_lazy (fun () -> Runtime'.Deserialize.deserialize (spec ()) constructor)
      let from_proto writer = Runtime'.Result.catch (fun () -> from_proto_exn writer)
      let to_json options =
        let serialize = Runtime'.Serialize_json.serialize ~message_name:(name ()) (spec ()) options in
        fun (paths) -> serialize paths
      let from_json_exn =
        let constructor paths = (paths) in
        Runtime'.apply_lazy (fun () -> Runtime'.Deserialize_json.deserialize ~message_name:(name ()) (spec ()) constructor)
      let from_json json = Runtime'.Result.catch (fun () -> from_json_exn json)
    end
  end
end
