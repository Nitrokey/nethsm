#%RAML 1.0
title: NetHSM
version: v1
description: All endpoints expect exactly the specified JSON. Additional properties will cause a Bad Request Error (400). All HTTP errors contain a JSON structure with an explanation of type string. All <a href="https://tools.ietf.org/html/rfc4648#section-4">base64</a> encoded values are Big Endian.
baseUri: https://{host}/api/{version}
baseUriParameters:
  host:
    default: nethsmdemo.nitrokey.com
    description: NetHSM hostname or IP address. For TLS certificate validation to succeed this should be the same as the <i>commonName</i> set in <a href="#config_tls_csr_pem_post">/config/tls/csr.pem</a>. In an <i>Unprovisioned</i> state, this is always 192.168.1.1.
protocols: [ https ]
mediaType: application/json
securitySchemes:
  basic:
    description: |
      NetHSM supports Basic Authentication.
    type: Basic Authentication
types:
  Passphrase:
    type: string
    minLength: 1
  ID:
    type: string
    pattern: ^[a-zA-Z0-9]+$
    minLength: 1
    maxLength: 128
  Base64:
    type: string
    pattern: ^[a-zA-Z0-9+/]+={0,3}$
  Switch:
    enum:
      - "on"
      - "off"
  SystemState:
    enum:
      - Unprovisioned
      - Locked
      - Operational
  UserRole:
    enum:
      - Administrator
      - Operator
      - Metrics
      - Backup
  LogLevel:
    enum:
      - debug
      - info
      - warning
      - error
  KeyType:
    enum:
      - RSA
      - Curve25519
      - EC_P224
      - EC_P256
      - EC_P384
      - EC_P521
      - Generic
  TlsKeyType:
    enum:
      - RSA
      - Curve25519
      - EC_P224
      - EC_P256
      - EC_P384
      - EC_P521
  KeyMechanism:
    enum:
      - RSA_Decryption_RAW
      - RSA_Decryption_PKCS1
      - RSA_Decryption_OAEP_MD5
      - RSA_Decryption_OAEP_SHA1
      - RSA_Decryption_OAEP_SHA224
      - RSA_Decryption_OAEP_SHA256
      - RSA_Decryption_OAEP_SHA384
      - RSA_Decryption_OAEP_SHA512
      - RSA_Signature_PKCS1
      - RSA_Signature_PSS_MD5
      - RSA_Signature_PSS_SHA1
      - RSA_Signature_PSS_SHA224
      - RSA_Signature_PSS_SHA256
      - RSA_Signature_PSS_SHA384
      - RSA_Signature_PSS_SHA512
      - EdDSA_Signature
      - ECDSA_Signature
      - AES_Encryption_CBC
      - AES_Decryption_CBC
  EncryptMode:
    enum:
      - AES_CBC
  DecryptMode:
    enum:
      - RAW
      - PKCS1
      - OAEP_MD5
      - OAEP_SHA1
      - OAEP_SHA224
      - OAEP_SHA256
      - OAEP_SHA384
      - OAEP_SHA512
      - AES_CBC
  SignMode:
    enum:
      - PKCS1
      - PSS_MD5
      - PSS_SHA1
      - PSS_SHA224
      - PSS_SHA256
      - PSS_SHA384
      - PSS_SHA512
      - EdDSA
      - ECDSA
  KeyList:
    type: array
    items: KeyItem
    example: [ { key: "KeyID" }]
  KeyItem:
    type: object
    properties:
      key: ID
    example: { key: "KeyID" }
  KeyRestrictions:
    type: object
    properties:
      tags: 
        type: TagList
        required: false
  UserList:
    type: array
    items: UserItem
    example: [ user: "admin" , user: "backup" , user: "metrics", user: "operator" ]
  UserItem:
    type: object
    properties:
      user: ID
  TagList:
    type: array
    items: ID
    example: [ "berlin" , "frankfurt" ]
  KeyMechanisms:
    type: array
    items: KeyMechanism
  PrivateKey:
    type: object
    properties:
      mechanisms: KeyMechanisms
      # mechanisms are constrained by type
      type: KeyType
      key: KeyPrivateData
      restrictions: 
        type: KeyRestrictions
        required: false
    example:
      mechanisms: [ "RSA_Signature_PSS_SHA256" ]
      type: "RSA"
      key:
        primeP: AOnWFZ+JrI/xOXJU04uYCZOiPVUWd6CSbVseEYrYQYxc7dVroePshz29tc+VEOUP5T0O8lXMEkjFAwjW6C9QTAsPyl6jwyOQluMRIkdN4/7BAg3HAMuGd7VmkGyYrnZWW54sLWp1JD6XJG33kF+9OSar9ETPoVyBgK5punfiUFEL
        primeQ: ANT1kWDdP9hZoFKT49dwdM/S+3ZDnxQa7kZk9p+JKU5RaU9e8pS2GOJljHwkES1FH6CUGeIaUi81tRKe2XZhe/163sEyMcxkaaRbBbTc1v6ZDKILFKKt4eX7LAQfhL/iFlgi6pcyUM8QDrm1QeFgGz11ChM0JuQw1WwkX06lg8iv
        publicExponent: AQAB
      restrictions:
        tags: [ "berlin" ]

  KeyPrivateData:
    type: object
    # this should express:
    #   keyType = RSA, primeP, primeQ, publicExponent are required
    #   keyType = ED25519, ECDSA_* or Generic, data is required
    properties:
      primeP:
        type: Base64
        required: false
      primeQ:
        type: Base64
        required: false
      publicExponent:
        type: Base64
        required: false
      data:
        type: Base64
        required: false
  PublicKey:
    type: object
    properties:
      mechanisms: KeyMechanisms
      # keyMechanisms are constrained by type
      type: KeyType
      restrictions: KeyRestrictions
      key: KeyPublicData
      operations: integer
    example:
      mechanisms: [ "RSA_Signature_PSS_SHA256" ]
      type: "RSA"
      restrictions:
        tags: [ "berlin" ]
      key:
        modulus: "FhJQl11CiY0ifRHXeAqFh4rdSl6"
        publicExponent: "FhJQl11CiY0ifRHXeAqFh4rdSl6"
      operations: 242
  KeyPublicData:
    type: object
    # this should express:
    #   keyType = RSA, modulus and publicExponent are required
    #   keyType = ED25519 or ECDSA_*, data is required
    properties:
      modulus:
        type: Base64
        required: false
      publicExponent:
        type: Base64
        required: false
      data:
        type: Base64
        required: false
  DistinguishedName:
    type: object
    properties:
      countryName:
        type: string # 2 letter code
        required: false
      stateOrProvinceName:
        type: string # full name
        required: false
      localityName:
        type: string # city
        required: false
      organizationName:
        type: string # company
        required: false
      organizationalUnitName:
        type: string # section
        required: false
      commonName:
        type: string # fully qualified host name
      emailAddress:
        type: string
        required: false
    example:
      countryName : "DE"
      stateOrProvinceName : ""
      localityName : "Berlin"
      organizationName : "Nitrokey"
      organizationalUnitName : ""
      commonName : "nethsm.local"
      emailAddress : "info@nitrokey.com"
  InfoData:
    type: object
    properties:
      vendor: string
      product: string
    example:
      vendor: Nitrokey GmbH
      product: NetHSM
  HealthStateData:
    type: object
    properties:
      state: SystemState
    example:
      state: "Unprovisioned"
  MetricsData:
    type: object
    example:
      keyOperations: 1132412
      someOtherMetric: 2222
  ProvisionRequestData:
    type: object
    properties:
      unlockPassphrase: Passphrase
      adminPassphrase: Passphrase
      systemTime: datetime #(UTC only)
    example:
      unlockPassphrase: "UnlockPassphrase"
      adminPassphrase: "Administrator"
      systemTime: "2018-10-30T11:20:50Z"
  UnlockRequestData:
    type: object
    properties:
      passphrase: Passphrase
    example:
      passphrase: "UnlockPassphrase"
  RandomRequestData:
    type: object
    properties:
      length:
        type: integer
        minimum: 1
        maximum: 1024
    example:
      length: 5
  RandomData:
    type: object
    properties:
      random: Base64
    example:
      random: "VGhlIHE="
  KeyGenerateRequestData:
    type: object
    properties:
      mechanisms: KeyMechanisms
      # mechanisms are constrained by type
      type: KeyType
      length:
        # required for RSA and Generic keys
        type: integer
        minimum: 128
        maximum: 8192
        required: false
      id:
        type: ID
        required: false
      restrictions:
        type: KeyRestrictions
        required: false
    example:
      mechanisms: [ "RSA_Signature_PSS_SHA256" ]
      type: "RSA"
      length: 2048 # Not required for EC keys
      id: "myKey2" # KeyID is optional, will be created if not present
  TlsKeyGenerateRequestData:
    type: object
    properties:
      type: TlsKeyType
      length:
        # required for RSA
        type: integer
        minimum: 128
        maximum: 8192
        required: false
    example:
      type: "RSA"
      length: 2048 # Not required for EC keys
  EncryptRequestData:
    type: object
    properties:
      mode: EncryptMode
      message: Base64
      iv: # for block cipher mode (optional, otherwise generated)
        type: Base64
        required: false
    example:
      mode: "AES_CBC"
      message: "nhrfotu32409ru0rgert45z54z099u23r03498uhtr=="
  EncryptData:
    type: object
    properties:
      encrypted: Base64
      iv: Base64
    example:
      encrypted: "IBCS8Sc4NkG/O+kqInz7mq/+Pr+5eJUJ/QpfwMp7pPjLn02U7ggyUrxJfN97MChHGekvGEK4Q1LCJ2juHTgjxJ94/QoEAN0dWZ7x3NxjlUgw7yBm7ylldVvToum3lWOVo3wPm5ozSGxpslrqgz2Rid9+uH5ytV8//CrkMOlqlUoj0DWMYbp/sUbYDGwG8lcfvKua67AxT3X/exSKCAwBuxPBr2p3DCTHepdmZCyexL809ZvBRopOQ41ve9X1jXqKzihrCPeoCwEok06EGYhPt3/EKFoer401S0MYtz5J1BvO1cv7ITDOYUCG4Ze8aXEjtnt6MMRx4jY7IqssYO8GrA=="
      iv: "MTIzNDU2Nzg5MDEyMzQ1Ng=="
  DecryptRequestData:
    type: object
    properties:
      mode: DecryptMode
      encrypted: Base64
      iv:
        type: Base64 # for block cipher modes
        required: false
    example:
      mode: "RAW"
      encrypted: "nhrfotu32409ru0rgert45z54z099u23r03498uhtr=="
  DecryptData:
    type: object
    properties:
      decrypted: Base64
    example:
      decrypted: "IBCS8Sc4NkG/O+kqInz7mq/+Pr+5eJUJ/QpfwMp7pPjLn02U7ggyUrxJfN97MChHGekvGEK4Q1LCJ2juHTgjxJ94/QoEAN0dWZ7x3NxjlUgw7yBm7ylldVvToum3lWOVo3wPm5ozSGxpslrqgz2Rid9+uH5ytV8//CrkMOlqlUoj0DWMYbp/sUbYDGwG8lcfvKua67AxT3X/exSKCAwBuxPBr2p3DCTHepdmZCyexL809ZvBRopOQ41ve9X1jXqKzihrCPeoCwEok06EGYhPt3/EKFoer401S0MYtz5J1BvO1cv7ITDOYUCG4Ze8aXEjtnt6MMRx4jY7IqssYO8GrA=="
  SignRequestData:
    type: object
    properties:
      mode: SignMode
      message: Base64
    example:
      mode: "PKCS1"
      message: "nhrfotu32409ru0rgert45z54z099u23r03498uhtr=="
  SignData:
    type: object
    properties:
      signature: Base64
    example:
      signature: "n4geMX1g8zcfipfcmn+XjM1ccWZULemAa0cuYoh1aXG9UhbE6f54NMp4NjboLf63SQyieJYjjV8q+/o1rFlkZCtKtHAheds+g90zdjOMmXFlXyBTKMhGOSHuleGz0c99x7Alg19KN9wB3Jj2niwweBOR/F4Qv0mdBUv+oO8uPl6vM1fS4tX/VJoCZkDnZzL8duKRNFT0SNQZ+ryLiqQMG53fEPhTplK/wK0Cco8JAYCMh9cxSzpBoCEO+9woxoBGehAjHuLxs6ed6q08W67leuibxZ8c6Q6upmwDlca/gSw0y4w1VIxxts2PORZdNsTWcr3lojcNgWXJcfAqF9/n4A=="
  UserPostData:
    type: object
    properties:
      realName : string
      role: UserRole
      passphrase: Passphrase
    example: { realName : "Jane User", role: "Administrator", passphrase: "My cool passphrase" }
  UserData:
    type: object
    properties:
      realName: string
      role: UserRole
    example: { realName: "Jane User", role: "Administrator" }
  UserPassphrasePostData:
    type: object
    properties:
      passphrase: Passphrase
    example: { "passphrase": "Some cool new passphrase" }
  UnlockPassphraseConfig:
    type: object
    properties:
      passphrase: Passphrase
    example:
      passphrase: "This is my unlock passphrase"
  UnattendedBootConfig:
    type: object
    properties:
      status: Switch
    example:
      status: "off"
  NetworkConfig:
    type: object
    properties:
      ipAddress: string
      netmask: string
      gateway: string
    example:
      ipAddress: 192.168.1.1
      netmask: 255.255.255.0
      gateway: 0.0.0.0
  LoggingConfig:
    type: object
    properties:
      ipAddress: string
      port: integer
      logLevel: LogLevel
    example:
      ipAddress: 0.0.0.0
      port: 514
      logLevel: info
  BackupPassphraseConfig:
    type: object
    properties:
      passphrase: Passphrase
    example:
      passphrase: "This is my backup passphrase"
  TimeConfig:
    type: object
    properties:
      time: datetime #(UTC only)
    example:
      time: "2018-10-30T11:20:50Z"
  SystemInfo:
    type: object
    properties:
      firmwareVersion: string
      softwareVersion: string
      hardwareVersion: string
      buildTag: string
    example:
      firmwareVersion: "N/A"
      softwareVersion: "1.7"
      hardwareVersion: "N/A"
      buildTag: "TAG-NN-g1234567-dirty"
  SystemUpdateData:
    type: object
    properties:
      releaseNotes: string
    example:
      releaseNotes: "Some new feature is available."
  PemPrivateKey:
    example: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEpAIBAAKCAQEAseU3o1Ix2euXUi50ht/mpDYnE2J4maJrIOLmDrmz+jv20hsR
      vPsWnKevYZqEYmvQFNO2Mv9DB5MZfnJ3jL3Aq71Ls1wqOnW9++bZAvqvEVUtlHh0
      5Rz9k1Ga32/OaHHEZj+lG9PlKI8y63K+sKZLuDYiVy1/gzARjpf2hCmTyQSAvtcA
      07WXAqorNI8mhcbIhnrGCeKfB8HYJ1T3uk2lXrwXehVaw9KZzg7KuRO0Qnk+IfR6
      LZjiKiEB9malzqSx3N20vibI672bMR+fqID2oC+ovNOEdRhPlCnztaY1HsnDhJt8
      MDTjlVGveCElvesuSVnNVHmVugDjEYTU1KV3TwIDAQABAoIBAQClSL5QDX9p5R28
      apMz+XYW3oWh2h0JScHVVVvBFMNm3S3vet0ZRAV3Wcl2mxUjSN6Vazte2JKTyBWo
      yXvQFUGdj4x1Qk2t8VWqZYr93KKqLQTjbKPXd/8WUHzf2sbhfcqn4bxrRY4mCB6c
      aglIocm6hvmTHB/caN33KbQOiX7ZBbwoZG3AKgoJU3SMXnVUfQzl/xnVrWLKESqm
      5kL0OTGLP091jZyMhcceh54RIuaJjPU4opL0bm46DLeQE4z20GfGCcRK/CUt4bNc
      c0wvuOyyzGI5p7QB/HCUJqR33m9ydwDkqC4vrORDxpMaSRNerpoGA+cNHREULh2P
      gaPydXq5AoGBAN3xIhci5LpIVvscNjPyxD6WQq5EZx251IzTnwQ/5E/+qxfYHvwe
      qAuLJ2+QvNQBuNKk85jwZsfUgPR6kku9dOt3n61lnrBRgGcqWnR0j8/NbpVe1qOe
      WArLeijpKKnCZ6uwpE6NND398dCmm3WLZZH64+1eLT8PbX/AIzId5zyzAoGBAM0x
      vWEsKi4pjNMBdaawJMbHEoDmMuib4t+FkbHDkqqSe/OIkHZ9tDQuHWpzDHmb30Na
      KNwQSNLwu3QK64z1NcjZUJFmu0+3NxSyI/EvNA9tiGCT5iSonsz04oa51AYt+IK5
      7JjMjo128INrQwtRFSYHx3hoVVW06tZNE037NiD1AoGABqeNOx5bt04l9X+CDIqx
      4aKFu03nvZdtzQ8nTGxR/ygGnz9mpm6Q4U+5zfmL/9tRXFd/yk0i98jiWPI34rd6
      gvjiO8O5P1YiQHWforBAA54IO8hNLTi5MRGqxwE+q+BdVWOFeal4MIelsXjdXmfg
      ksDwBpT1TFe9E8CCDaWh4ksCgYAhHCiR2H2J61x04+RnHD8i8BZ1RC/sxtKp/LSQ
      uZ0d9vsXRe8Bn7EHRnWqqpvVt6gkBxVWxS3rE7s7s1Nk8GBYY3CTtb790vOJXGFe
      Vp6Q6ry50MOvIKJXMiCnWq7yvFJATd32nfNWsl2G5zTvS4sdEt5F+Jfkd4f5QoCd
      8a4/TQKBgQDEdY3XTibkDt80zUFIP6RRAyfM6p2grk+o08De0BBZD/1GX9V9ARNT
      bC3+2qXXDYGxbMWgsoqsQTREJD78+sdD3q+IfIc1m7XvuIgyLMAalm+Kd1HlUF/J
      7VCKjgchT0OKwmi0d52TEOiz6U35Jv4GWBstsh1KVpHYiTnwnhAwKg==
      -----END RSA PRIVATE KEY-----
  PemPublicKey:
    example: |
      -----BEGIN PUBLIC KEY-----
      MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx7ghfro+VEepYmy2V7HP
      n5PSRdmGzxewcpmzxTtrZ10BygbEqhPsAr4fWI9pG7iRXzeza7DMjrQptzKsfSy6
      dBFmSEZer+hJxuOdhBG/FX6pjwRrZpbOQxyr+aTlE3jm2XP12Cqx0wsYGIoJlWHb
      Gb90IAx9zpdYQgHoJZ4x5ims5vo7h3puPEyVycJH5fMBB9h+2Bxc4BxaPKMm15JR
      1B7ToB3g16SJY2B1t/aqNmqSBZC4HP1fCuSbBm83OgqRhdk1P6r/vqOVKrxVupDq
      Kkdcf/dRBiQalJ9tQbVbs9OOYfQ6n25GvJTvGtqOEuggit32tV16JXCZjnYePAvt
      NwIDAQAB
      -----END PUBLIC KEY-----
  PemCSR:
    example: |
      -----BEGIN CERTIFICATE REQUEST-----
      MIICpzCCAY8CAQAwYjFgMAkGA1UEBhMCREUwDQYDVQQHDAZCZXJsaW4wDwYDVQQK
      DAhOaXRyb2tleTATBgNVBAMMDG5ldGhzbS5sb2NhbDAeBgkqhkiG9w0BCQEWEWlu
      Zm9Abml0cm9rZXkuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
      x7ghfro+VEepYmy2V7HPn5PSRdmGzxewcpmzxTtrZ10BygbEqhPsAr4fWI9pG7iR
      Xzeza7DMjrQptzKsfSy6dBFmSEZer+hJxuOdhBG/FX6pjwRrZpbOQxyr+aTlE3jm
      2XP12Cqx0wsYGIoJlWHbGb90IAx9zpdYQgHoJZ4x5ims5vo7h3puPEyVycJH5fMB
      B9h+2Bxc4BxaPKMm15JR1B7ToB3g16SJY2B1t/aqNmqSBZC4HP1fCuSbBm83OgqR
      hdk1P6r/vqOVKrxVupDqKkdcf/dRBiQalJ9tQbVbs9OOYfQ6n25GvJTvGtqOEugg
      it32tV16JXCZjnYePAvtNwIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBABVz67ib
      ngef9acHkwTYHHQk3MHxQRSLOxUKoDjk1URMgJ2hgL5HR91yQ3gBPxVuEGWdEQXJ
      C4sM9S3OoM5yFJFj56Y8MaASHFo58V5N1FaFqf3BbVKNzM4Jgrtghw1teJU45xZR
      0+sjA0YjVJwGnNXfBJdQVNXgWJcXy4bmPSaF7khxDnoP7dmxMcpQ2HKL8X9E/kef
      KOhz+HtlCWoqwD77aR3wKrYWdn+fwMeTRGNpJLPdKl7vyleb8pjtWUYnNTIP4Zh+
      BLX93udZxl8sVpJBnLcIWplwJB16hxk5ZODjWUOrhkwZ0MbiPFbKkihc8GMLLEyp
      dHRjrbgAUrx5DuY=
      -----END CERTIFICATE REQUEST-----
  PemCert:
    example: |
      -----BEGIN CERTIFICATE-----
      MIIEvDCCAqQCCQCZ9VKHZSKydDANBgkqhkiG9w0BAQsFADAgMQ4wDAYDVQQIDAVo
      ZWxsbzEOMAwGA1UEBwwFaGVsbG8wHhcNMTgxMDMwMTI0MDQ3WhcNMTkxMDMwMTI0
      MDQ3WjAgMQ4wDAYDVQQIDAVoZWxsbzEOMAwGA1UEBwwFaGVsbG8wggIiMA0GCSqG
      SIb3DQEBAQUAA4ICDwAwggIKAoICAQC8WRImgeu4U6Yg5q0/SvoieQL5JwPHaCrN
      6Cc0mj8pnzTBu/f0QYNentcnu0EclD99kla6/gdiJnt0b/IT23o37+t2n0BvEgVQ
      MJxJ/BjIqSZCykq4SWHKia1OS7tJKE2Q/hgGq/RQJ0zecWKA9SuafXDt0plw0saz
      P8ZosFyToMYnPB54SzXj4qeD5t2L2dOamTTyziw/GJDGdwssImEDfeWyMRRyHcIa
      u9HNGaTxjCdBGzCR+PEX3ZHhGzl5iMlgtZUICgXMgAvFZHHEYNtyCW9ZzUB2ZKE2
      nMbu8hbl7GXRCdJaAqlJfKiGp/WvbmrLhCzcwqhu4UnqGXOxeEQryrkPAbiLafqb
      fPLHB7dr8OEGlUzp1SCHR1JxwdBVohuO2lL+O5nMD3ZVdVnh2F5Et6I9lO4w9+5n
      aI6pmO4oy9PsqKvUjxVnEeo1Ee1n9o/4T6fe6XBIQLPqEmy2IXynZP0eJn1Yu9SF
      TkTSmJ+jRiU7EMaagQrM4Ds5seVNVWKOvUjDQCV+QRZaaPcrkMoFtjLCVMhLgy7M
      /Dfl63qCcdVkPwdbI/apjfG8qMrez4k3qAZDYgS3fujyuq9wv7xbq2+o0Ck4Ono2
      mMAA6JDSZr8XwR3ac/UK1KGv+weh1fOVO+c6mSN9M+W1MtkJS+i4/Aj2yDCJzVk3
      GZpd5/E6WwIDAQABMA0GCSqGSIb3DQEBCwUAA4ICAQAB+8+1dk20P6R+RvDRs1mo
      e1CegaPH2bl9t1WVuXJIUkrIGDceVr5f19pcaNQRYwZuoQd8VQXCZUpWbo//TWxl
      ItS3prQgcrfcTi7gCzp1+q1bZk6H21tzESDJTXPFp019/ypdUB4Jsty7qQL73sE3
      nj67DH+srPCknAhfFag0dPOOjAY19IrIomtBMlvYNpb5XupEUAQFCjk6VdLVAzzl
      M5Swj+kmLA0OUHTF2zAwj2k+B9RAkbetu/lXLwUiiQNG00j8YP03lErxDd29m2jl
      NFlSn8YYsgzmihF5fUFTJXP5tS7lF4FnLNbw9pfdeVZBT1uTOcckmFv6n6edttZS
      FhC70hBB8tFFtemGFquZ0N7w8O7DmIYI936n283rzxyuWdi+JqOUQ0KzpGbFOP3t
      AOdVcx/JW8kjDdWRcRDr85M4MnkG6HEzW4uzGBtxBplL7KH0L8LX+lx6ySjIrbRD
      QtwBxwZGtHZJAqskO6vobzzybCKuVUaQwkPrQsK5iLA6Nn1Yxu6XmtlvoPeNIc63
      Pa3ix8vNFbBTtS6iBdbOPse5qgRV0DC94ocedzKw4QzQRa5REIniJ2X8hVoVAcBh
      3nQKyZApl2I/pZMlbZ0Cg5yxjhBaxKwci7jyoMerMMo2EdbZN87gP+2x6tKuY1MO
      35mqzHn+FjWq0eAtpzhO5Q==
      -----END CERTIFICATE-----
  PGPPrivateKey:
    example: |
      -----BEGIN PGP PRIVATE KEY BLOCK-----
      Version: GnuPG v2

      MIIEvDCCAqQCCQCZ9VKHZSKydDANBgkqhkiG9w0BAQsFADAgMQ4wDAYDVQQIDAVo
      ZWxsbzEOMAwGA1UEBwwFaGVsbG8wHhcNMTgxMDMwMTI0MDQ3WhcNMTkxMDMwMTI0
      MDQ3WjAgMQ4wDAYDVQQIDAVoZWxsbzEOMAwGA1UEBwwFaGVsbG8wggIiMA0GCSqG
      SIb3DQEBAQUAA4ICDwAwggIKAoICAQC8WRImgeu4U6Yg5q0/SvoieQL5JwPHaCrN
      6Cc0mj8pnzTBu/f0QYNentcnu0EclD99kla6/gdiJnt0b/IT23o37+t2n0BvEgVQ
      MJxJ/BjIqSZCykq4SWHKia1OS7tJKE2Q/hgGq/RQJ0zecWKA9SuafXDt0plw0saz
      P8ZosFyToMYnPB54SzXj4qeD5t2L2dOamTTyziw/GJDGdwssImEDfeWyMRRyHcIa
      u9HNGaTxjCdBGzCR+PEX3ZHhGzl5iMlgtZUICgXMgAvFZHHEYNtyCW9ZzUB2ZKE2
      nMbu8hbl7GXRCdJaAqlJfKiGp/WvbmrLhCzcwqhu4UnqGXOxeEQryrkPAbiLafqb
      fPLHB7dr8OEGlUzp1SCHR1JxwdBVohuO2lL+O5nMD3ZVdVnh2F5Et6I9lO4w9+5n
      aI6pmO4oy9PsqKvUjxVnEeo1Ee1n9o/4T6fe6XBIQLPqEmy2IXynZP0eJn1Yu9SF
      TkTSmJ+jRiU7EMaagQrM4Ds5seVNVWKOvUjDQCV+QRZaaPcrkMoFtjLCVMhLgy7M
      /Dfl63qCcdVkPwdbI/apjfG8qMrez4k3qAZDYgS3fujyuq9wv7xbq2+o0Ck4Ono2
      mMAA6JDSZr8XwR3ac/UK1KGv+weh1fOVO+c6mSN9M+W1MtkJS+i4/Aj2yDCJzVk3
      GZpd5/E6WwIDAQABMA0GCSqGSIb3DQEBCwUAA4ICAQAB+8+1dk20P6R+RvDRs1mo
      e1CegaPH2bl9t1WVuXJIUkrIGDceVr5f19pcaNQRYwZuoQd8VQXCZUpWbo//TWxl
      ItS3prQgcrfcTi7gCzp1+q1bZk6H21tzESDJTXPFp019/ypdUB4Jsty7qQL73sE3
      nj67DH+srPCknAhfFag0dPOOjAY19IrIomtBMlvYNpb5XupEUAQFCjk6VdLVAzzl
      M5Swj+kmLA0OUHTF2zAwj2k+B9RAkbetu/lXLwUiiQNG00j8YP03lErxDd29m2jl
      NFlSn8YYsgzmihF5fUFTJXP5tS7lF4FnLNbw9pfdeVZBT1uTOcckmFv6n6edttZS
      FhC70hBB8tFFtemGFquZ0N7w8O7DmIYI936n283rzxyuWdi+JqOUQ0KzpGbFOP3t
      AOdVcx/JW8kjDdWRcRDr85M4MnkG6HEzW4uzGBtxBplL7KH0L8LX+lx6ySjIrbRD
      QtwBxwZGtHZJAqskO6vobzzybCKuVUaQwkPrQsK5iLA6Nn1Yxu6XmtlvoPeNIc63
      Pa3ix8vNFbBTtS6iBdbOPse5qgRV0DC94ocedzKw4QzQRa5REIniJ2X8hVoVAcBh
      3nQKyZApl2I/pZMlbZ0Cg5yxjhBaxKwci7jyoMerMMo2EdbZN87gP+2x6tKuY1MO
      35mqzHn+FjWq0eAtpzhO5Q==
      -----END PGP PRIVATE KEY BLOCK-----

annotationTypes:
  state:
    type: array
    items: SystemState
  role:
    type: array
    items:
      enum: [ Administrator, Operator, Metrics, Backup, Public ]


/info:
  description: "Public"
  get:
    (state): [ Locked, Operational, Unprovisioned ]
    (role): [ Public ]
    description: Information about the vendor and product.
    responses:
      200:
        body:
          application/json: InfoData

/health:
  description: "Public"
  /alive:
    get:
      (role): [ Public ]
      (state): [ Locked , Unprovisioned ]
      description: Retrieve wether NetHSM is alive (powered up). This corresponds to the state <i>Locked</i> or <i>Unprovisioned</i>.
      responses:
        200:
          description: Yes, it is alive.
        412:
          description: Not locked or unprovisioned (in operational state).
  /ready:
    get:
      (role): [ Public ]
      (state): [ Operational ]
      description: Retrieve wether NetHSM is alive and ready to take traffic. This corresponds to the state <i>Operational</i>.
      responses:
        200:
          description: Yes, it is alive and ready.
        412:
          description: Not alive and ready (not in operational state).
  /state:
    get:
      (role): [ Public ]
      (state): [ Locked, Operational, Unprovisioned ]
      description: Retrieve the state of NetHSM.
      responses:
        200:
          body:
            application/json: HealthStateData

/metrics:
  description: "Role: <b>R-Metrics</b>"
  get:
    (role): [ Metrics ]
    (state): [ Operational ]
    description: "Get metrics. Precondition: NetHSM is <i>Operational</i> and a <b>R-Metrics</b> can be authenticated."
    securedBy: [ basic ]
    responses:
      200:
        body:
          application/json: MetricsData
      401:
        description: Authentication required but none provided.
      403:
        description: Access denied.
      412:
        description: Precondition failed (NetHSM was not <i>Operational</i>).

/provision:
  description: "Public"
  post:
    (role): [ Public ]
    (state): [ Unprovisioned ]
    description: Initial provisioning, only available in <i>Unprovisioned</i> state.
    body:
      application/json: ProvisionRequestData
    responses:
      204:
        description: Provisioning was successful, NetHSM is <i>Operational</i> now.
      400:
        description: Malformed request data (e.g. malformed time, weak passphrase).
      412:
        description: Precondition failed (NetHSM was not <i>Unprovisioned</i>).

/unlock:
  description: "Public"
  post:
    (role): [ Public ]
    (state): [ Locked ]
    description: Brings a <i>Locked</i> NetHSM into <i>Operational</i> state.
    body:
      application/json: UnlockRequestData
    responses:
      204:
        description: Unlock was successful, NetHSM is <i>Operational</i> now.
      400:
        description: Bad request (invalid passphrase).
      403:
        description: Unlock failed (access denied).
      412:
        description: Precondition failed (NetHSM was not <i>Locked</i>).

/lock:
  description: "Administrator"
  post:
    (role): [ Administrator ]
    (state): [ Operational ]
    description: Brings an <i>Operational</i> NetHSM into <i>Locked</i> state.
    securedBy: [ basic ]
    responses:
      204:
        description: Lock was successful, NetHSM is <i>Locked</i> now.
      401:
        description: Authentication required but none provided.
      403:
        description: Lock failed (access denied).
      412:
        description: Precondition failed (NetHSM was not <i>Operational</i>).

/random:
  description: "Role: <b>R-Operator</b>"
  post:
    (role): [ Operator ]
    (state): [ Operational ]
    description: "Retrieve cryptographically strong random bytes from NetHSM. Precondition: NetHSM is <i>Operational</i> and a <b>R-Operator</b> can be authenticated."
    securedBy: [ basic ]
    body:
      application/json: RandomRequestData
    responses:
      200:
        description: Successful request for <i>length</i> random bytes.
        body:
          application/json: RandomData
      401:
        description: Authentication required but none provided.
      403:
        description: Access denied.
      412:
        description: Precondition failed (NetHSM was not <i>Operational</i>).

# - no paging for now, but if we wanted it we would key it on KeyID and return a subsequence based on limit and offset
/keys:
  description: "Role: <b>R-Operator</b> can GET keys. <b>R-Administrator</b> can GET and POST keys, and also POST /generate."
  get:
    (role): [ Administrator, Operator ]
    (state): [ Operational ]
    description: Get a list of the identifiers of all keys that are currently stored in NetHSM. Separate requests need to be made to request the individual key data.
    securedBy: [ basic ]
    queryParameters:
      filter:
        description: Only return keys that are can be used by the requester, according to restrictions.
        type: null
        required: false
    responses:
      200:
        description: Successful request for the list of keys.
        body:
          application/json: KeyList
      401:
        description: Authentication required but none provided.
      403:
        description: Access denied.
      412:
        description: Precondition failed (NetHSM was not <i>Operational</i>).

  post:
    (role): [ Administrator ]
    (state): [ Operational ]
    description: Import a private key into NetHSM and let NetHSM generate a KeyID. The public key will be automatically derived.
    securedBy: [ basic ]
    queryParameters:
      mechanisms:
        required: false
        type: array
        items: KeyMechanism
      tags:
        required: false
        type: array
        items: ID
    body:
      application/x-pem-file: PemPrivateKey
      application/json: PrivateKey
    responses:
      201:
        description: Successful import of a private key. The response contains a Location header, e.g. "https://nethsm.local/v1/keys/I8mhHYJ1T3uk2lXrwXehVaw9KZzg7K".
      400:
        description: Bad request (specified properties are invalid).
      401:
        description: Authentication required but none provided.
      403:
        description: Access denied.
      412:
        description: Precondition failed (NetHSM was not <i>Operational</i>).

  /generate:
    description: "Role: <b>R-Administrator</b>"
    post:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Generate a pair of public and private key and store it in NetHSM. KeyID is optional as a parameter and will be generated by NetHSM if not present.
      securedBy: [ basic ]
      body:
        application/json: KeyGenerateRequestData
      responses:
        201:
          description: Successful creation of new public and private key pair. Set Location header to the new KeyID.
        400:
          description: Bad request (specified properties are invalid).
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).

/keys/{KeyID}:
    description: "Role: <b>R-Operator</b> can GET, <b>R-Administrator</b> can GET, PUT and DELETE. Also, <b>R-Operator</b> can POST /sign and /decrypt."
    get:
      (role): [ Administrator, Operator ]
      (state): [ Operational ]
      description: Retrieve the public key.
      securedBy: [ basic ]
      responses:
        200:
          body:
            application/json: PublicKey
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
        404:
          description: Key for KeyID not found.
    put:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Import a private key into NetHSM and store it under the <i>KeyID</i> path. The public key will be automatically derived.
      securedBy: [ basic ]
      queryParameters:
        mechanisms:
          required: false
          type: array
          items: KeyMechanism
        tags:
          required: false
          type: array
          items: ID
      body:
        application/json: PrivateKey
        application/x-pem-file: PemPrivateKey
      responses:
        204:
          description: Successful import of a private key.
        400:
          description: Bad request (specified properties are invalid).
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
        409:
          description: Conflict, key already exists for this keyID.
    delete:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Delete a pair of public and private key.
      securedBy: [ basic ]
      responses:
        204:
          description: Key was successfully deleted.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
        404:
          description: Key for KeyID not found.

    /public.pem:
      get:
        (role): [ Administrator, Operator ]
        (state): [ Operational ]
        description: Retrieve public key in PEM format.
        securedBy: [ basic ]
        responses:
          200:
            body:
              application/x-pem-file: PemPublicKey
          401:
            description: Authentication required but none provided.
          403:
            description: Access denied.
          412:
            description: Precondition failed (NetHSM was not <i>Operational</i>).
          404:
            description: Key for KeyID not found.

    /csr.pem:
      post:
        (role): [ Administrator, Operator ]
        (state): [ Operational ]
        description: Retrieve a certificate signing request in PEM format.
        securedBy: [ basic ]
        body:
          application/json: DistinguishedName
        responses:
          200:
            description: Successful generation of certificate signing request.
            body:
              application/x-pem-file: PemCSR
          401:
            description: Authentication required but none provided.
          403:
            description: Access denied.
          412:
            description: Precondition failed (NetHSM was not <i>Operational</i>).
          404:
            description: Key for KeyID not found.

    /decrypt:
      post:
        (role): [ Operator ]
        (state): [ Operational ]
        description: Decrypt an encrypted message with the secret key.
        securedBy: [ basic ]
        body:
          application/json: DecryptRequestData
        responses:
          200:
            body:
              application/json: DecryptData
          401:
            description: Authentication required but none provided.
          403:
            description: Access denied.
          412:
            description: Precondition failed (NetHSM was not <i>Operational</i>).
          404:
            description: Key for KeyID not found.
          400:
            description: Bad Request, e.g. invalid encryption mode.

    /sign:
      post:
        (role): [ Operator ]
        (state): [ Operational ]
        description: Sign a message with the secret key.
        securedBy: [ basic ]
        body:
          application/json: SignRequestData
        responses:
          200:
            body:
              application/json: SignData
          401:
            description: Authentication required but none provided.
          403:
            description: Access denied.
          412:
            description: Precondition failed (NetHSM was not <i>Operational</i>).
          404:
            description: Key for KeyID not found.
          400:
            description: Bad Request, e.g. invalid signing mode.

    /cert:
      description: "Role: <b>R-Operator</b> can GET, <b>R-Administrator</b> can GET, PUT and DELETE."
      get:
        (role): [ Administrator, Operator ]
        (state): [ Operational ]
        description: Retrieve stored certificate. The content-type header will display the media type of the stored data.
        securedBy: [ basic ]
        responses:
          200:
            body:
              application/x-pem-file: PemCert
              application/x-x509-ca-cert:
              application/pgp-keys: PGPPrivateKey
          401:
            description: Authentication required but none provided.
          403:
            description: Access denied.
          412:
            description: Precondition failed (NetHSM was not <i>Operational</i>).
          404:
            description: Certificate for KeyID not found.
      put:
        (role): [ Administrator ]
        (state): [ Operational ]
        description: Store a certificate. Maximum size 1MB. The content-type header provides the media type. Only application/json, application/x-pem-file, application/x-x509-ca-cert, application/octet-stream, text/plain and application/pgp-keys is allowed.
        securedBy: [ basic ]
        body:
          application/x-pem-file: PemCert
          application/x-x509-ca-cert:
          application/pgp-keys: PGPPrivateKey
        responses:
          201:
            description: Successful import of a certificate.
          401:
            description: Authentication required but none provided.
          403:
            description: Access denied.
          412:
            description: Precondition failed (NetHSM was not <i>Operational</i>).
          409:
            description: Conflict, certificate already exists for this KeyID.
      delete:
        (role): [ Administrator ]
        (state): [ Operational ]
        description: Delete the certificate.
        securedBy: [ basic ]
        responses:
          204:
            description: Successful deletion of a certificate.
          401:
            description: Authentication required but none provided.
          403:
            description: Access denied.
          412:
            description: Precondition failed (NetHSM was not <i>Operational</i>).
          404:
            description: Certificate with this KeyID not found.
    
    /restrictions:
      description: "<b>R-Administrator</b> can set up access restrictions for keys"
      /tags/{Tag}:
        description: "Tag-based restriction requires the Operator user to have at least one matching tag to use the key."
        put:
          (role): [ Administrator ]
          (state): [ Operational ]
          description: Add a tag to the authorized set
          securedBy: [ basic ]
          responses:
            204:
              description: Successful addition of the tag.
            400:
              description: Bad request, tag format is invalid.
            401:
              description: Authentication required but none provided.
            403:
              description: Access denied.
            404:
              description: KeyID not found.
            412:
              description: Precondition failed (NetHSM was not <i>Operational</i>).
        delete:
          (role): [ Administrator ]
          (state): [ Operational ]
          description: Delete a tag from the authorized set
          securedBy: [ basic ]
          responses:
            204:
              description: Successful deletion of the tag.
            401:
              description: Authentication required but none provided.
            403:
              description: Access denied.
            412:
              description: Precondition failed (NetHSM was not <i>Operational</i>).
            404:
              description: Tag or keyID not found.

/users:
  description: "Role: <b>R-Administrator</b> can GET, POST"
  get:
    (role): [ Administrator ]
    (state): [ Operational ]
    description: Get a list of all user ids that have accounts on NetHSM.
    securedBy: [ basic ]
    responses:
      200:
        body:
          application/json: UserList
      401:
        description: Authentication required but none provided.
      403:
        description: Access denied.
      412:
        description: Precondition failed (NetHSM was not <i>Operational</i>).
  post:
    (role): [ Administrator ]
    (state): [ Operational ]
    description: Create a new user on NetHSM. The user-ID is generated by NetHSM.
    securedBy: [ basic ]
    body:
      application/json: UserPostData
    responses:
      201:
        description: Successful creation of user. The response contains a Location header, e.g. "https://nethsm.local/v1/users/I8mhHYJ1T3uk2lXrwXehVaw9KZzg7K".
      400:
        description: Bad request (specified properties are invalid, e.g. weak passphrase).
      401:
        description: Authentication required but none provided.
      403:
        description: Access denied.
      412:
        description: Precondition failed (NetHSM was not <i>Operational</i>).

/users/{UserID}:
  description: "Role: <b>R-Operator</b> can GET users, and POST their own passphrase, <b>R-Administrator</b> can GET, PUT and DELETE, and POST the passphrase for everyone."
  get:
    (role): [ Administrator, Operator ]
    (state): [ Operational ]
    description: "Get user info: name and role."
    securedBy: [ basic ]
    responses:
      200:
        body:
          application/json: UserData
      401:
        description: Authentication required but none provided.
      403:
        description: Access denied.
      412:
        description: Precondition failed (NetHSM was not <i>Operational</i>).
      404:
        description: User for UserID not found.
  put:
    (role): [ Administrator ]
    (state): [ Operational ]
    description: Create a user on keyfender.
    securedBy: [ basic ]
    body:
      application/json: UserPostData
    responses:
      201:
        description: Successful creation of user.
      400:
        description: Bad request (specified properties are invalid, e.g. weak passphrase).
      401:
        description: Authentication required but none provided.
      403:
        description: Access denied.
      412:
        description: Precondition failed (NetHSM was not <i>Operational</i>).
      409:
        description: Conflict - user already exists for this user-ID.
  delete:
    (role): [ Administrator ]
    (state): [ Operational ]
    description: Delete a user from keyfender.
    securedBy: [ basic ]
    responses:
      204:
        description: Successful deletion of user.
      401:
        description: Authentication required but none provided.
      403:
        description: Access denied.
      412:
        description: Precondition failed (NetHSM was not <i>Operational</i>).
      404:
        description: User not found for this user-ID.

  # current passphrase not needed for update
  /passphrase:
    post:
      (role): [ Administrator, Operator ] ## TODO Operator can only post for themselves - how to generate test here?
      (state): [ Operational ]
      description: Update the passphrase.
      securedBy: [ basic ]
      body:
        application/json: UserPassphrasePostData
      responses:
        204:
          description: Successful change of passphrase.
        400:
          description: Bad request - weak passphrase.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
        404:
          description: User not found for this user-ID.

/users/{UserID}/tags:
    get:
      (role): [ Administrator, Operator ] ## TODO Operator can only get tags for themselves
      (state): [ Operational ]
      description: Get the list of tags set to an Operator user.
      securedBy: [ basic ]
      responses:
        200:
          body:
            application/json: TagList
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
        404:
          description: User not found for this user-ID.

/users/{UserID}/tags/{Tag}:
  description: "Tags: <b>R-Administrator</b> can PUT and DELETE the tags for everyone."
  put:
    (role): [ Administrator ]
    (state): [ Operational ]
    description: Add a tag to the Operator user.
    securedBy: [ basic ]
    responses:
      204:
        description: Successful addition of the tag.
      304:
        description: Tag is already present for this UserID.
      400:
        description: Bad request, tag format is invalid or user is not an operator.
      401:
        description: Authentication required but none provided.
      403:
        description: Access denied.
      404:
        description: UserID not found.
      412:
        description: Precondition failed (NetHSM was not <i>Operational</i>).
  delete:
    (role): [ Administrator ]
    (state): [ Operational ]
    description: Delete a tag from the Operator user
    securedBy: [ basic ]
    responses:
      204:
        description: Successful deletion of the tag.
      401:
        description: Authentication required but none provided.
      403:
        description: Access denied.
      412:
        description: Precondition failed (NetHSM was not <i>Operational</i>).
      404:
        description: Tag or user not found.

/config:
  description: "Role: <b>R-Administrator</b>"
  /unlock-passphrase:
    put:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Update the unlock passphrase.
      securedBy: [ basic ]
      body:
        application/json: UnlockPassphraseConfig
      responses:
        204:
          description: Successful change of passphrase.
        400:
          description: Bad request - weak passphrase.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
  /unattended-boot:
    get:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: "Read unattended boot configuration: is it on or off?"
      securedBy: [ basic ]
      responses:
        200:
          description: Successful read of unattended boot configuration.
          body:
            application/json: UnattendedBootConfig
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).

    put:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: "Configure unattended boot: switch it on or off (flip the switch)."
      securedBy: [ basic ]
      body:
        application/json: UnattendedBootConfig
      responses:
        204:
          description: Successful change of unattended boot mode.
        400:
          description: Bad request - invalid status setting.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).

  /tls:
    /public.pem:
      get:
        (role): [ Administrator ]
        (state): [ Operational ]
        description: Get public key for NetHSMs https API.
        securedBy: [ basic ]
        responses:
          200:
            body:
              application/x-pem-file: PemPublicKey
            description: Successful retrieval of public key.
          401:
            description: Authentication required but none provided.
          403:
            description: Access denied.
          412:
            description: Precondition failed (NetHSM was not <i>Operational</i>).
    /cert.pem:
      get:
        (role): [ Administrator ]
        (state): [ Operational ]
        description: Get certificate for NetHSMs https API.
        securedBy: [ basic ]
        responses:
          200:
            body:
              application/x-pem-file: PemCert
            description: Successful retrieval of certificate.
          401:
            description: Authentication required but none provided.
          403:
            description: Access denied.
          412:
            description: Precondition failed (NetHSM was not <i>Operational</i>).

      put:
        (role): [ Administrator ]
        (state): [ Operational ]
        description: Set certificate for NetHSMs https API e.g. to replace self-signed intital certificate.
        securedBy: [ basic ]
        body:
          application/x-pem-file: PemCert
        responses:
          201:
            description: Successfully set certificate.
          401:
            description: Authentication required but none provided.
          403:
            description: Access denied.
          412:
            description: Precondition failed (NetHSM was not <i>Operational</i>).

    /csr.pem:
      post:
        (role): [ Administrator ]
        (state): [ Operational ]
        description: Get NetHSM certificate signing request e.g. to replace self-signed intital certificate.
        securedBy: [ basic ]
        body:
          application/json: DistinguishedName
        responses:
          200:
            description: Successful generation of certificate signing request.
            body:
              application/x-pem-file: PemCSR
          401:
            description: Authentication required but none provided.
          403:
            description: Access denied.
          412:
            description: Precondition failed (NetHSM was not <i>Operational</i>).

    /generate:
      post:
        (role): [ Administrator ]
        (state): [ Operational ]
        description: Generate a new pair of public and private key for NetHSM's https API.
        securedBy: [ basic ]
        body:
          application/json: TlsKeyGenerateRequestData
        responses:
          204:
            description: Successful creation of new public and private key pair for NetHSM's https API.
          400:
            description: Bad request (specified properties are invalid).
          401:
            description: Authentication required but none provided.
          403:
            description: Access denied.
          412:
            description: Precondition failed (NetHSM was not <i>Operational</i>).

  /network:
    get:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Get network configuration. IP address, netmask, router.
      securedBy: [ basic ]
      responses:
        200:
          body:
            application/json: NetworkConfig
          description: Successful retrieval of network configuration.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
    put:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Configure network.
      securedBy: [ basic ]
      body:
        application/json: NetworkConfig
      responses:
        204:
          description: Succesful update of network configuration.
        400:
          description: Bad request - invalid input format.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).

  /logging:
    get:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Get logging configuration. Protocol is always syslog over UDP. Configurable are IP adress and port, log level.
      securedBy: [ basic ]
      responses:
        200:
          description: Successful retrieval of logging configuration.
          body:
            application/json: LoggingConfig
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
    put:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Configure log level and destination.
      securedBy: [ basic ]
      body:
        application/json: LoggingConfig
      responses:
        204:
          description: Succesful update of logging configuration.
        400:
          description: Bad request - invalid input format.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
  /backup-passphrase:
    put:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Update the backup passphrase.
      securedBy: [ basic ]
      body:
        application/json: BackupPassphraseConfig
      responses:
        204:
          description: Successful change of passphrase.
        400:
          description: Bad request - weak passphrase.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
  /time:
    get:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Get system time.
      securedBy: [ basic ]
      responses:
        200:
          description: Successful retrieval of system time.
          body:
            application/json: TimeConfig
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
    put:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Configure system time.
      securedBy: [ basic ]
      body:
        application/json: TimeConfig
      responses:
        204:
          description: Succesful update of system time.
        400:
          description: Bad request - invalid input format.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).

# RPC uses post
/system:
  description: "Role: <b>R-Administrator</b>"
  /info:
    get:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Get detailed system information, including firmware version, system software version, hardware version.
      securedBy: [ basic ]
      responses:
        200:
          description: Successful retrieval of system information.
          body:
            application/json: SystemInfo
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).

  /reboot:
    post:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Reboot NetHSM.
      securedBy: [ basic ]
      responses:
        204:
          description: About to reboot NetHSM.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
  /shutdown:
    post:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Shut down NetHSM.
      securedBy: [ basic ]
      responses:
        204:
          description: About to shut down NetHSM.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
  /factory-reset:
    post:
      (role): [ Administrator ]
      (state): [ Operational ]
      description: Reset NetHSM to factory settings.
      securedBy: [ basic ]
      responses:
        204:
          description: About to reset NetHSM.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
  /update:
    post:
      (role): [ Administrator ]
      (state): [ Operational ]
      securedBy: [ basic ]
      description: Update NetHSM software.
      body:
        application/octet-stream: # encrypted backup
      responses:
        200:
          description: Successfully verified update image (authenticity, integrity, and version number).
          body:
            application/json: SystemUpdateData
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i>).
        409:
          description: Conflict - Major version downgrade is not allowed.
  /commit-update:
    post:
      (role): [ Administrator ]
      (state): [ Operational ]
      securedBy: [ basic ]
      description: Commit update of NetHSM software.
      responses:
        204:
          description: About to update NetHSM.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i> or update image is not present - call /update first).
  /cancel-update:
    post:
      (role): [ Administrator ]
      (state): [ Operational ]
      securedBy: [ basic ]
      description: Cancel update of NetHSM software.
      responses:
        204:
          description: Update successfully cancelled.
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i> or update image is not present - call /update first).


  /backup:
    post:
      (role): [ Backup ]
      (state): [ Operational ]
      securedBy: [ basic ]
      description: Back up the key store to a backup file.
      responses:
        200:
          description: Successful retrieval of backup data.
          body:
            application/octet-stream: # encrypted backup
        401:
          description: Authentication required but none provided.
        403:
          description: Access denied.
        412:
          description: Precondition failed (NetHSM was not <i>Operational</i> or <i>Backup Passphrase</i> was not set).
  /restore:
    post:
      (role): [ Public ]
      (state): [ Unprovisioned ]
      description: Restore the key store from a backup file. Only available in <i>Unprovisioned</i> state.
      queryParameters:
        backupPassphrase:
          type: Passphrase
        systemTime:
          type: datetime #(UTC only)
      body:
        application/octet-stream: # encrypted backup
      responses:
        204:
          description: Successful restore from backup data.
        412:
          description: Precondition failed (NetHSM was not <i>Unprovisioned</i>).
        400:
          description: Bad request - restore did not apply.
