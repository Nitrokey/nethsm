default:
  image: "mato/nethsm-builder@sha256:5315102997e3e163cb679317f332f3914adc2f30784360d8937edce1aae1e5d5"
  before_script:
    - source .gitlab-ci-setup.bash
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 1 week
    paths:
      - obj/artifacts/
  interruptible: true

stages:
  - check
  - test
  - build_dev
  - build_container
  - build_muen
  - deploy

build_keyfender:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: dev
  stage: build_dev
  script:
    - make fetch-submodules
    - make -j$(nproc) build

test_keyfender:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: test
  stage: test
  script:
    - make fetch-submodules
    - make -j$(nproc) coverage-summary

build_muen_qemu_kvm:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: muen
    MUEN_HARDWARE: qemu-kvm
  stage: build_muen
  needs: [build_keyfender]
  script:
    - make fetch-submodules
    - make -j$(nproc) build artifacts

build_muen_supermicro_x11ssh_tf:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: muen
    MUEN_HARDWARE: supermicro-x11ssh-tf
  stage: build_muen
  needs: [build_keyfender]
  script:
    - make fetch-submodules
    - make -j$(nproc) build artifacts

build_muen_updater_supermicro_x11ssh_tf:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: muen-updater
    MUEN_HARDWARE: supermicro-x11ssh-tf
  stage: build_muen
  script:
    - make fetch-submodules
    - make -j$(nproc) build artifacts

build_container_image:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    DOCKER_HOST: tcp://docker:2375
    # This will instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  stage: build_container
  image: "docker"
  artifacts: {}
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd src/container
    - >
      docker build
      --build-arg GIT_USER=gitlab-ci-token
      --build-arg GIT_PASSWORD=$CI_JOB_TOKEN
      --build-arg GIT_COMMIT=$CI_COMMIT_SHORT_SHA
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      -f alpine/Dockerfile .
    - docker push -a $CI_REGISTRY_IMAGE

deploy_container_image:
  only:
    - master
  except:
    - schedules
  variables:
    DOCKER_HOST: tcp://docker:2375
    # This will instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
    IMAGE_NAME: "nitrokey/nethsm"
    IMAGE_TAG: "testing"
    REGISTRY: "docker.io"
  services:
    - docker:dind
  stage: deploy
  image: "docker"
  artifacts: {}
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cat $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER --password-stdin $REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
    - docker push -a $REGISTRY/$IMAGE_NAME

validate_api_spec:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    VALIDATOR: "node tools/api/convert_validate.js"
    API_SPEC: "docs/nethsm-api.raml"
  stage: check
  image: "node:alpine3.12"
  artifacts: {}
  before_script: []
  script:
    - npm install webapi-parser
    - $VALIDATOR < $API_SPEC
