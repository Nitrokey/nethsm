default:
  image: "mato/nethsm-builder@sha256:67f01806a00f1b62fc2d1b61ef52d86f22b9d4411b968e2afe7216e0992e775f"
  before_script:
    - source .gitlab-ci-setup.bash
  tags:
    - docker
  interruptible: true
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

stages:
  - check
  - test
  - build_dev
  - build_docs
  - build_container
  - build_muen
  - deploy

build_keyfender:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: dev
  stage: build_dev
  needs: []
  script:
    - make fetch-submodules
    - make -j$(nproc) build

test_keyfender:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: test
  stage: test
  needs: []
  script:
    - make fetch-submodules
    - make -j$(nproc) coverage-summary

build_muen_qemu_kvm:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: muen
    MUEN_HARDWARE: qemu-kvm
  stage: build_muen
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 1 week
    paths:
      - obj/artifacts/
  needs:
    - build_keyfender
  script:
    - make fetch-submodules
    - make -j$(nproc) build artifacts

build_muen_prodrive_hermes:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: muen
    MUEN_HARDWARE: prodrive-hermes-1.0
  stage: build_muen
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 1 week
    paths:
      - obj/artifacts/
  needs:
    - build_keyfender
  script:
    - make fetch-submodules
    - make -j$(nproc) build artifacts

build_container_image:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  needs:
    - validate_api_spec
    - build_api_docs
  stage: build_container
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - mkdir -p /kaniko/.docker
    - >
      echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf
      "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 |
      tr -d '\n')\"}}}" > /kaniko/.docker/config.json

  script:
    - mv api_docs src/container/static/
    - mv api_spec/* src/container/static/api_docs/
    - cp docs/nethsm-api.raml src/container/static/api_docs/
    - if [ ${CI_PIPELINE_SOURCE} == "schedule" ] ; then NOPUSH="--no-push" ; fi
    - >-
      /kaniko/executor --context "${CI_PROJECT_DIR}"
      --dockerfile ${CI_PROJECT_DIR}/src/container/alpine/Dockerfile
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" $NOPUSH

deploy_container_image:
  only:
    - master
  except:
    - schedules
  variables:
    IMAGE_NAME: "nitrokey/nethsm"
    IMAGE_TAG: "testing"
    REGISTRY: "docker.io"
  stage: deploy
  image: $CI_REGISTRY_IMAGE/skopeo
  dependencies: []
  before_script:
    - echo $CI_REGISTRY_PASSWORD | skopeo login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - cat $DOCKERHUB_TOKEN | skopeo login -u $DOCKERHUB_USER --password-stdin $REGISTRY
  script:
    - skopeo copy docker://$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA docker://$REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - skopeo copy docker://$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA docker://$REGISTRY/$IMAGE_NAME:$IMAGE_TAG

validate_api_spec:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    VALIDATOR: "node tools/api/convert_validate.js"
    API_SPEC: "docs/nethsm-api.raml"
  stage: check
  image: "node:alpine"
  dependencies: []
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 1 week
    paths:
      - api_spec/
  before_script: []
  script:
    - npm install webapi-parser
    - $VALIDATOR < $API_SPEC
    - mkdir api_spec
    - cp gen_nethsm_api_* api_spec/

build_api_docs:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    API_SPEC: "docs/nethsm-api.raml"
    NODE_OPTIONS: "--openssl-legacy-provider"
  stage: build_docs
  image: "node:alpine"
  dependencies: []
  needs:
    - validate_api_spec
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 1 week
    paths:
      - api_docs/
  before_script: []
  script:
    - npm install api-console-cli
    - ./node_modules/.bin/api-console build -t "RAML 1.0" --app-title "NetHSM API"
        --verbose --strict -o api_docs/ $API_SPEC
