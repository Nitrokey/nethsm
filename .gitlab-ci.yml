variables:
  BUILDER_TAG: latest
  USE_CCACHE: 1
  CCACHE_DIR: /downloads/ccache

.dependency_paths:
  builder: &builder_dep_paths
    - src/container/builder/**
    - .opam-repository-commit
    - .gitlab-ci.yml
  coreboot: &coreboot_dep_paths
    - src/coreboot/**
    - keys/**
    - .gitlab-ci.yml
    - Makefile*

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE == "push"
      when: never
    - changes:
        paths: *builder_dep_paths
      variables:
        BUILDER_TAG: ${CI_COMMIT_SHORT_SHA}
    - when: always

default:
  image: "${CI_REGISTRY_IMAGE}/builder:${BUILDER_TAG}"
  before_script:
    - git config --global --add safe.directory ${CI_PROJECT_DIR}
    - sudo chmod 01777 /downloads
    - mkdir -p /downloads/opam
    - rm -rf ~/.opam/download-cache
    - ln -s /downloads/opam ~/.opam/download-cache
  tags:
    - docker
  interruptible: true
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

stages:
  - prepare
  - build
  - build_muen
  - build_coreboot
  - deploy
  - check
  - build_container

build_builder_image:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      variables:
        NOPUSH: "--no-push"
    - if: ($BUILDER_TAG != "latest" && $CI_COMMIT_BRANCH != "master")
  stage: prepare
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - chmod 01777 /downloads
    - "[ -d /downloads/opam/ ] || mkdir -m 0777 /downloads/opam"
    - mkdir -p /kaniko/.docker
    - >
      echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf
      "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 |
      tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/src/container/builder"
      --destination "${CI_REGISTRY_IMAGE}/builder:${CI_COMMIT_SHORT_SHA}"
      --cache=true
      --cache-repo "${CI_REGISTRY_IMAGE}/builder/cache"
      --skip-unused-stages=true
      --build-arg GITLAB_TOKEN=${GITLAB_TOKEN}
      --build-arg OPAM_REPOSITORY_COMMIT=$(cat .opam-repository-commit)
      --build-arg COMMIT_ID=${CI_COMMIT_SHORT_SHA}
      --push-retry 5
      --image-fs-extract-retry 5
      ${NOPUSH}

deploy_builder_image:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
  stage: deploy
  image:
    name: quay.io/skopeo/stable:latest
    entrypoint: [""]
  dependencies: []
  before_script:
    - echo $CI_REGISTRY_PASSWORD | skopeo login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - >
      if skopeo inspect docker://${CI_REGISTRY_IMAGE}/builder:${CI_COMMIT_SHORT_SHA} 2>/dev/null ;
      then skopeo copy docker://${CI_REGISTRY_IMAGE}/builder:${CI_COMMIT_SHORT_SHA}
      docker://${CI_REGISTRY_IMAGE}/builder:latest ; fi

build_dev:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH != "master"
  variables:
    MODE: dev
  stage: build
  needs:
    - job: build_builder_image
      optional: true
  script:
    - opam exec -- make -j$(nproc) build

test_keyfender:
  rules:
    - if: $CI_COMMIT_BRANCH != "master" || $CI_PIPELINE_SOURCE == "schedule"
  variables:
    MODE: test
  stage: build
  needs:
    - job: build_builder_image
      optional: true
  coverage: '/(Coverage: ).*\((.*)\)/'
  script:
    - opam exec -- make -j$(nproc) coverage-summary

build_muen_qemu_kvm:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      variables:
        WITH_COREBOOT: "1"
    - if: $CI_COMMIT_BRANCH != "master"
      changes:
        paths: *coreboot_dep_paths
      variables:
        WITH_COREBOOT: "1"
    - if: $CI_COMMIT_BRANCH != "master"
  variables:
    MODE: muen
    MUEN_HARDWARE: qemu-kvm
  stage: build_muen
  needs:
    - job: build_builder_image
      optional: true
    - build_dev
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 1 week
    paths:
      - obj/artifacts/
  script:
    - opam exec -- make -j$(nproc) artifacts

build_muen_prodrive_hermes:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      variables:
        WITH_COREBOOT: "1"
    - if: $CI_COMMIT_BRANCH != "master"
      changes:
        paths: *coreboot_dep_paths
      variables:
        WITH_COREBOOT: "1"
    - if: $CI_COMMIT_BRANCH != "master"
  variables:
    MODE: muen
    MUEN_HARDWARE: prodrive-hermes-1.0
  stage: build_muen
  needs:
    - job: build_builder_image
      optional: true
    - build_dev
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 1 week
    paths:
      - obj/artifacts/
  script:
    - opam exec -- make -j$(nproc) artifacts

build_container_image:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      variables:
        NOPUSH: "--no-push"
    - if: $CI_COMMIT_BRANCH != "master"
  needs: []
  stage: build_container
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - chmod 01777 /downloads
    - "[ -d /downloads/opam/ ] || mkdir -m 0777 /downloads/opam"
    - mkdir -m 0777 -p /home/opam/.opam
    - ln -s /downloads/opam /home/opam/.opam/download-cache
    - mkdir -p /kaniko/.docker
    - >
      echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf
      "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 |
      tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - >-
      /kaniko/executor --context "${CI_PROJECT_DIR}"
      --single-snapshot
      --snapshotMode=time
      --dockerfile ${CI_PROJECT_DIR}/src/container/alpine/Dockerfile
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" ${NOPUSH}
      --push-retry 5
      --image-fs-extract-retry 5

deploy_container_image:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
  variables:
    IMAGE_NAME: "nitrokey/nethsm"
    IMAGE_TAG: "testing"
    REGISTRY: "docker.io"
  stage: deploy
  image:
    name: quay.io/skopeo/stable:latest
    entrypoint: [""]
  dependencies: []
  before_script:
    - echo $CI_REGISTRY_PASSWORD | skopeo login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - cat $DOCKERHUB_TOKEN | skopeo login -u $DOCKERHUB_USER --password-stdin $REGISTRY
  script:
    - skopeo copy docker://$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA docker://$REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - skopeo copy docker://$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA docker://$REGISTRY/$IMAGE_NAME:$IMAGE_TAG

validate_api_spec:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH != "master"
  variables:
    API_SPEC: "docs/nethsm-api.yaml"
    API_SPEC_DEBUG: "nethsm-api-debug.log"
  stage: check
  needs: []
  image: "alpine"
  dependencies: []
  services:
    - name: swaggerapi/swagger-validator-v2
      alias: swagger-validator
  before_script: []
  script:
    - apk add curl
    - 'curl --request POST http://swagger-validator:8080/validator/debug
      --header "Accept: application/json"
      --header "Content-Type: application/yaml"
      --data-binary @$API_SPEC
      --output $API_SPEC_DEBUG'
    - grep "^{}$" nethsm-api-debug.log
