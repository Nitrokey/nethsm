variables:
  BUILDER_TAG: latest
  USE_CCACHE: 1
  CCACHE_DIR: /downloads/ccache
  GIT_LFS_SKIP_SMUDGE: 1

.dependency_paths:
  builder: &builder_dep_paths
    - src/container/builder/**
    - .opam-repository-commit
    - .gitlab-ci.yml
  coreboot: &coreboot_dep_paths
    - src/coreboot/**
    - keys/**
    - .gitlab-ci.yml
    - Makefile*

.setup_opam_downloads: &setup_opam_downloads
  - git config --global --add safe.directory ${CI_PROJECT_DIR}
  - sudo chmod 01777 /downloads
  - mkdir -p /downloads/opam
  - rm -rf ~/.opam/download-cache
  - ln -s /downloads/opam ~/.opam/download-cache

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: $CI_COMMIT_BRANCH != "master"
      changes:
        paths: *builder_dep_paths
      variables:
        BUILDER_TAG: ${CI_COMMIT_SHORT_SHA}
    - when: always

default:
  image: "${CI_REGISTRY_IMAGE}/builder:${BUILDER_TAG}"
  tags:
    - docker
  interruptible: true
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

stages:
  - prepare
  - test
  - build
  - test_hw
  - commit

build_builder_image:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      variables:
        NOPUSH: "--no-push"
    - if: $BUILDER_TAG != "latest"
  stage: prepare
  needs: []
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - chmod 01777 /downloads
    - "[ -d /downloads/opam/ ] || mkdir -m 0777 /downloads/opam"
    - mkdir -p /kaniko/.docker
    - >
      echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf
      "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 |
      tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/src/container/builder"
      --destination "${CI_REGISTRY_IMAGE}/builder:${CI_COMMIT_SHORT_SHA}"
      --cache=true
      --cache-repo "${CI_REGISTRY_IMAGE}/builder/cache"
      --skip-unused-stages=true
      --build-arg GITLAB_TOKEN=${GITLAB_TOKEN}
      --build-arg OPAM_REPOSITORY_COMMIT=$(cat .opam-repository-commit)
      --build-arg COMMIT_ID=${CI_COMMIT_SHORT_SHA}
      --push-retry 5
      --image-fs-extract-retry 5
      ${NOPUSH}

validate_api_spec:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH != "master"
  variables:
    API_SPEC: "docs/nethsm-api.yaml"
    API_SPEC_DEBUG: "nethsm-api-debug.log"
  stage: test
  needs: []
  image: "${CI_REGISTRY_IMAGE}/builder:latest"
  services:
    - name: swaggerapi/swagger-validator-v2
      alias: swagger-validator
  script:
    - 'curl --request POST http://swagger-validator:8080/validator/debug
      --header "Accept: application/json"
      --header "Content-Type: application/yaml"
      --data-binary @$API_SPEC
      --output $API_SPEC_DEBUG'
    - grep "^{}$" nethsm-api-debug.log

test_keyfender:
  rules:
    - if: $CI_COMMIT_BRANCH != "master" || $CI_PIPELINE_SOURCE == "schedule"
  variables:
    MODE: test
  stage: test
  needs:
    - job: build_builder_image
      optional: true
  coverage: '/(Coverage: ).*\((.*)\)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: obj/cobertura.xml
  before_script: *setup_opam_downloads
  script:
    - opam exec -- make -j$(nproc) coverage-summary

build_dev:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH != "master"
  variables:
    MODE: dev
  stage: build
  needs:
    - job: build_builder_image
      optional: true
  before_script: *setup_opam_downloads
  script:
    - opam exec -- make -j$(nproc) build

build_muen_prodrive_hermes:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      variables:
        WITH_COREBOOT: "1"
    - if: $CI_COMMIT_BRANCH != "master"
      changes:
        paths: *coreboot_dep_paths
      variables:
        WITH_COREBOOT: "1"
    - if: $CI_COMMIT_BRANCH != "master"
  variables:
    MODE: muen
    MUEN_HARDWARE: prodrive-hermes-1.0
    GIT_LFS_SKIP_SMUDGE: 0
  stage: build
  needs:
    - job: build_builder_image
      optional: true
    # - job: build_dev
    #   artifacts: false
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHORT_SHA}"
    expire_in: 1 week
    paths:
      - ${CI_JOB_NAME}_artifacts
  before_script: *setup_opam_downloads
  script:
    - opam exec -- make -j$(nproc) artifacts
    - mkdir -p ${CI_JOB_NAME}_artifacts
    - cp obj/artifacts/*/*/* ${CI_JOB_NAME}_artifacts
    - touch ${CI_JOB_NAME}_artifacts/.$(git -C . describe --dirty --tags --always)

build_muen_qemu_kvm:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      variables:
        WITH_COREBOOT: "1"
    - if: $CI_COMMIT_BRANCH != "master"
      changes:
        paths: *coreboot_dep_paths
      variables:
        WITH_COREBOOT: "1"
    - if: $CI_COMMIT_BRANCH != "master"
  variables:
    MODE: muen
    MUEN_HARDWARE: qemu-kvm
  stage: build
  needs:
    - job: build_builder_image
      optional: true
    - job: build_dev
      artifacts: false
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHORT_SHA}"
    expire_in: 1 week
    paths:
      - ${CI_JOB_NAME}_artifacts
  before_script: *setup_opam_downloads
  script:
    - opam exec -- make -j$(nproc) artifacts
    - mkdir -p ${CI_JOB_NAME}_artifacts
    - cp obj/artifacts/*/*/* ${CI_JOB_NAME}_artifacts
    - touch ${CI_JOB_NAME}_artifacts/.$(git -C . describe --dirty --tags --always)

build_ci_installer_prodrive_hermes:
  rules:
    - if: $CI_COMMIT_BRANCH != "master" || $CI_PIPELINE_SOURCE == "schedule"
  stage: test_hw
  needs:
    - job: build_muen_prodrive_hermes
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHORT_SHA}"
    expire_in: 1 week
    paths:
      - obj/ci-installer.img
  script:
    - tools/mk-ci-installer.sh ${CI_PROJECT_DIR}/build_muen_prodrive_hermes_artifacts/installer.img

test_muen_prodrive_hermes:
  tags:
    - "hermes"
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    NETHSM_IP: 192.168.1.1
    BMC_IP: 192.168.144.2
    BMC_USER: bmc_admin
    BMC_PASS: nitrokey
    HTTP_SERVER: 192.168.144.1
  stage: test_hw
  needs:
    - build_ci_installer_prodrive_hermes
  script:
    - cp obj/ci-installer.img /var/www/html/${CI_JOB_ID}-installer.img
    - tools/deploy-on-hw.sh "http://${HTTP_SERVER}/${CI_JOB_ID}-installer.img"
    - rm /var/www/html/${CI_JOB_ID}-installer.img
    - >-
      while ! curl -s -k -f https://${NETHSM_IP}/api/v1/health/state ; do
      printf "." ; sleep 5 ; done && echo
    - cd src/tests
    - NETHSM_URL="https://${NETHSM_IP}/api" ./provision_test.sh &&
    - >-
      { TIMEFORMAT="Total time: %R" ; time
      NETHSM_URL="https://${NETHSM_IP}/api" REQUESTS=1000 CONNECTIONS=10
      ./load_test.sh ; } 2>&1 | tee ${CI_PROJECT_DIR}/obj/load_test.out
    - >-
      TIME=$(tail -1 ${CI_PROJECT_DIR}/obj/load_test.out | sed -n 's/Total time: \(.*\)/\1/p')
    - PERF=$(bc -l <<<"x=100/e(l(2)*${TIME}/60);scale=2;x/1")
    - "echo Performance: ${PERF}%"
  after_script:
    - >-
      curl -k -s
      https://${BMC_IP}/redfish/v1/Systems/1/Actions/ComputerSystem.Reset -u
      ${BMC_USER}:${BMC_PASS} -H "Content-Type: application/json" -d
      '{"ResetType": "ForceOff"}'
  coverage: "/(^Performance: )(.*)%/"

build_container_image:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      variables:
        NOPUSH: "--no-push"
    - if: $CI_COMMIT_BRANCH != "master"
  needs:
    - job: build_builder_image
      optional: true
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - chmod 01777 /downloads
    - "[ -d /downloads/opam/ ] || mkdir -m 0777 /downloads/opam"
    - mkdir -m 0777 -p /home/opam/.opam
    - ln -s /downloads/opam /home/opam/.opam/download-cache
    - mkdir -p /kaniko/.docker
    - >
      echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf
      "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 |
      tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - >-
      /kaniko/executor --context "${CI_PROJECT_DIR}"
      --single-snapshot
      --snapshotMode=time
      --dockerfile ${CI_PROJECT_DIR}/src/container/alpine/Dockerfile
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}" ${NOPUSH}
      --push-retry 5
      --image-fs-extract-retry 5

commit_builder_image:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
  stage: commit
  image:
    name: quay.io/skopeo/stable:latest
    entrypoint: [""]
  needs: []
  before_script:
    - echo $CI_REGISTRY_PASSWORD | skopeo login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - >
      if skopeo inspect docker://${CI_REGISTRY_IMAGE}/builder:${CI_COMMIT_SHORT_SHA} 2>/dev/null ;
      then skopeo copy docker://${CI_REGISTRY_IMAGE}/builder:${CI_COMMIT_SHORT_SHA}
      docker://${CI_REGISTRY_IMAGE}/builder:latest ; fi

commit_container_image:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
  variables:
    IMAGE_NAME: "nitrokey/nethsm"
    IMAGE_TAG: "testing"
    REGISTRY: "docker.io"
  stage: commit
  image:
    name: quay.io/skopeo/stable:latest
    entrypoint: [""]
  needs: []
  before_script:
    - echo $CI_REGISTRY_PASSWORD | skopeo login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - cat $DOCKERHUB_TOKEN | skopeo login -u $DOCKERHUB_USER --password-stdin $REGISTRY
  script:
    - skopeo copy docker://$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA docker://$REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - skopeo copy docker://$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA docker://$REGISTRY/$IMAGE_NAME:$IMAGE_TAG

commit_artifact_package:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
  variables:
    PACKAGENAME: nethsm
    VERSION: latest
  stage: commit
  image: "${CI_REGISTRY_IMAGE}/builder:latest"
  needs: []
  script:
    - >
      curl -o artifacts.zip --location --header "JOB-TOKEN: ${CI_JOB_TOKEN}"
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/artifacts/master/download?job=build_muen_prodrive_hermes"
    - >
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file artifacts.zip
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGENAME}/${VERSION}/${PACKAGENAME}_${CI_COMMIT_SHORT_SHA}.zip"
