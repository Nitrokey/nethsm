default:
  image: "mato/nethsm-builder@sha256:67f01806a00f1b62fc2d1b61ef52d86f22b9d4411b968e2afe7216e0992e775f"
  before_script:
    - source .gitlab-ci-setup.bash
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 1 week
    paths:
      - obj/artifacts/
  interruptible: true
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

stages:
  - check
  - test
  - build_dev
  - build_docs
  - build_container
  - build_muen
  - deploy

build_keyfender:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: dev
  stage: build_dev
  script:
    - make fetch-submodules
    - make -j$(nproc) build

test_keyfender:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: test
  stage: test
  script:
    - make fetch-submodules
    - make -j$(nproc) coverage-summary

build_muen_qemu_kvm:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: muen
    MUEN_HARDWARE: qemu-kvm
  stage: build_muen
  needs:
    - build_keyfender
  script:
    - make fetch-submodules
    - make -j$(nproc) build artifacts

build_muen_supermicro_x11ssh_tf:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: muen
    MUEN_HARDWARE: supermicro-x11ssh-tf
  stage: build_muen
  needs:
    - build_keyfender
  script:
    - make fetch-submodules
    - make -j$(nproc) build artifacts

build_muen_updater_supermicro_x11ssh_tf:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    MODE: muen-updater
    MUEN_HARDWARE: supermicro-x11ssh-tf
  stage: build_muen
  script:
    - make fetch-submodules
    - make -j$(nproc) build artifacts

build_container_image:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    DOCKER_HOST: tcp://docker:2375
    # This will instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
  dependencies:
    - validate_api_spec
    - build_api_docs
  artifacts: {}
  services:
    - docker:dind
  stage: build_container
  image: "docker"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - mv api_docs src/container/static/
    - mv api_spec/* src/container/static/api_docs/
    - cp docs/nethsm-api.raml src/container/static/api_docs/
    - >
      docker build
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      -f src/container/alpine/Dockerfile .
    - if [ $CI_PIPELINE_SOURCE != "schedule" ] ; then docker push -a $CI_REGISTRY_IMAGE ; fi

deploy_container_image:
  only:
    - master
  except:
    - schedules
  variables:
    DOCKER_HOST: tcp://docker:2375
    # This will instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
    IMAGE_NAME: "nitrokey/nethsm"
    IMAGE_TAG: "testing"
    REGISTRY: "docker.io"
  services:
    - docker:dind
  stage: deploy
  image: "docker"
  dependencies: []
  artifacts: {}
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cat $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER --password-stdin $REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
    - docker push -a $REGISTRY/$IMAGE_NAME

validate_api_spec:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    VALIDATOR: "node tools/api/convert_validate.js"
    API_SPEC: "docs/nethsm-api.raml"
  stage: check
  image: "node:alpine3.12"
  dependencies: []
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 1 week
    paths:
      - api_spec/
  before_script: []
  script:
    - npm install webapi-parser
    - $VALIDATOR < $API_SPEC
    - mkdir api_spec
    - cp gen_nethsm_api_* api_spec/

build_api_docs:
  except:
    variables:
      - ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  variables:
    API_SPEC: "docs/nethsm-api.raml"
  stage: build_docs
  image: "node:alpine3.12"
  dependencies: []
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 1 week
    paths:
      - api_docs/
  before_script: []
  script:
    - npm install api-console-cli
    - npm install amf-client-js@4.7.2 # 4.7.3 is broken
    - ./node_modules/.bin/api-console build -t "RAML 1.0" --app-title "NetHSM API"
        --verbose --strict -o api_docs/ $API_SPEC
